# core/utility_functions.py
"""
‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡∏π‡∏ó‡∏¥‡∏•‡∏¥‡∏ï‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° SIM Management System
"""

import serial.tools.list_ports
import re
from datetime import datetime


def list_serial_ports():
    """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏≠‡∏£‡πå‡∏ï Serial ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö 
    
    Returns:
        list: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ tuple ‡∏Ç‡∏≠‡∏á (device, description)
        ‡πÄ‡∏ä‡πà‡∏ô [("COM9", "Simcom HS-USB AT PORT 9001"), ...]
    """
    return [(p.device, p.description) for p in serial.tools.list_ports.comports()]


def normalize_phone_number(raw: str) -> str:
    """‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô +66653988461 ‚Üí 0653988461"""
    if not raw:
        return ""
    
    raw = str(raw).strip()
    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ payload ‡∏ï‡πà‡∏≠‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏î‡∏ó‡∏¥‡πâ‡∏á (‡πÄ‡∏ä‡πà‡∏ô "+66653988461|0E...") 
    if "|" in raw:
        raw = raw.split("|", 1)[0]
    print(f"üîç DEBUG normalize: Input = '{raw}'")
    
    # ‡∏•‡∏ö‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©
    raw = raw.replace('-', '').replace(' ', '').replace('(', '').replace(')', '')
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
    if raw.startswith("+66"):
        raw = "0" + raw[3:]
        print(f"üîç DEBUG normalize: After +66 conversion = '{raw}'")
    elif raw.startswith("66") and len(raw) > 10:
        raw = "0" + raw[2:]
        print(f"üîç DEBUG normalize: After 66 conversion = '{raw}'")
    
    # ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    digits = ''.join(filter(str.isdigit, raw))
    print(f"üîç DEBUG normalize: Digits only = '{digits}'")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß
    if len(digits) >= 10:
        result = digits[-10:]  # ‡πÄ‡∏≠‡∏≤ 10 ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    elif len(digits) >= 9:
        result = "0" + digits[-9:]  # ‡πÄ‡∏ï‡∏¥‡∏° 0 ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏î
    else:
        result = digits
    
    print(f"‚úÖ DEBUG normalize: Final result = '{result}'")
    return result


def format_datetime_for_display(dt_str):
    """‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    
    Args:
        dt_str (str): ‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤
        
    Returns:
        tuple: (date_formatted, time_formatted)
    """
    try:
        if ',' in dt_str:
            # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YY/MM/DD,HH:MM:SS+TZ
            date_part, time_part = dt_str.split(',', 1)
            
            # ‡∏ï‡∏±‡∏î‡πÄ‡∏≠‡∏≤ timezone ‡∏≠‡∏≠‡∏Å
            if '+' in time_part:
                time_part = time_part.split('+', 1)[0]
            
            # ‡πÅ‡∏õ‡∏•‡∏á YY/MM/DD ‡πÄ‡∏õ‡πá‡∏ô DD/MM/YYYY
            y, m, d = date_part.split('/')
            year = int(y) + 2000 if int(y) < 100 else int(y)
            formatted_date = f"{d.zfill(2)}/{m.zfill(2)}/{year}"
            
            return formatted_date, time_part.strip()
        else:
            # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD HH:MM:SS
            dt = datetime.strptime(dt_str, "%Y-%m-%d %H:%M:%S")
            return dt.strftime("%d/%m/%Y"), dt.strftime("%H:%M:%S")
            
    except Exception:
        return dt_str, ""


def validate_phone_number(phone):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
    
    Args:
        phone (str): ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        
    Returns:
        bool: True ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    """
    if not phone:
        return False
    
    # ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    phone_digits = re.sub(r'[^\d]', '', phone)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß (9-10 ‡∏´‡∏•‡∏±‡∏Å ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÑ‡∏ó‡∏¢)
    return len(phone_digits) >= 9 and len(phone_digits) <= 10


def encode_text_to_ucs2(text):
    """‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô UCS2 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á SMS
    
    Args:
        text (str): ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
        
    Returns:
        str: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏õ‡πá‡∏ô UCS2 hex
    """
    try:
        return text.encode('utf-16-be').hex().upper()
    except Exception as e:
        print(f"Error encoding to UCS2: {e}")
        return ""

def decode_ucs2_to_text(hex_str):
    """
    ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å UCS2 hex format - ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á
    
    Args:
        hex_str: UCS2 hex string
    
    Returns:
        str: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß
    """
    if not hex_str:
        return ""
    
    try:
        # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î hex string
        hex_clean = hex_str.replace(" ", "").strip().strip('"')
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô hex ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        if len(hex_clean) % 2 != 0:
            return hex_str
        
        if not all(c in '0123456789ABCDEFabcdef' for c in hex_clean):
            return hex_str
        
        # ‡∏ß‡∏¥‡∏ò‡∏µ 1: ‡πÅ‡∏õ‡∏•‡∏á UCS2 ‡∏ó‡∏µ‡∏•‡∏∞ 4 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Unicode)
        if len(hex_clean) % 4 == 0:
            text = ""
            for i in range(0, len(hex_clean), 4):
                hex_chunk = hex_clean[i:i+4]
                try:
                    char_code = int(hex_chunk, 16)
                    if char_code > 0 and char_code < 65536:
                        text += chr(char_code)
                except:
                    continue
            
            if text:
                return text.replace('\x00', '').strip()
        
        # ‡∏ß‡∏¥‡∏ò‡∏µ 2: ‡πÉ‡∏ä‡πâ UTF-16BE
        try:
            bytes_data = bytes.fromhex(hex_clean)
            decoded = bytes_data.decode('utf-16-be', errors='ignore')
            return decoded.replace('\x00', '').strip()
        except:
            pass
        
        # ‡∏ß‡∏¥‡∏ò‡∏µ 3: ‡πÉ‡∏ä‡πâ UTF-8 (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤)
        try:
            bytes_data = bytes.fromhex(hex_clean)
            decoded = bytes_data.decode('utf-8', errors='ignore')
            return decoded.strip()
        except:
            pass
        
        return hex_str
        
    except Exception as e:
        print(f"[ERROR] UCS2 text decode failed: {e}")
        return hex_str
    
def decode_ucs2_phone_number(hex_str):
    """
    ‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏à‡∏≤‡∏Å UCS2 hex format ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢ (0xxxxxxxxx)
    
    Args:
        hex_str: UCS2 hex string ‡πÄ‡∏ä‡πà‡∏ô "002B00360036003600350033003900380038003400360031"
    
    Returns:
        str: ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô "0653988461"
    """
    if not hex_str:
        return "Unknown"
    
    # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î hex string
    hex_clean = hex_str.replace(" ", "").strip().strip('"')
    
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô hex ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        if len(hex_clean) % 4 != 0:
            return hex_str
        
        if not all(c in '0123456789ABCDEFabcdef' for c in hex_clean):
            return hex_str
        
        # ‡πÅ‡∏õ‡∏•‡∏á UCS2 ‡∏ó‡∏µ‡∏•‡∏∞ 4 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ (2 bytes)
        phone_number = ""
        for i in range(0, len(hex_clean), 4):
            hex_chunk = hex_clean[i:i+4]
            if len(hex_chunk) == 4:
                try:
                    char_code = int(hex_chunk, 16)
                    if char_code > 0 and char_code < 65536:
                        character = chr(char_code)
                        phone_number += character
                except (ValueError, OverflowError):
                    continue
        
        if phone_number and len(phone_number) > 5:
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢
            return normalize_phone_number(phone_number.strip())
        
        # Fallback: ‡πÉ‡∏ä‡πâ UTF-16BE
        try:
            bytes_data = bytes.fromhex(hex_clean)
            utf16_decoded = bytes_data.decode('utf-16-be', errors='ignore')
            cleaned = utf16_decoded.replace('\x00', '').strip()
            
            if cleaned and len(cleaned) > 5:
                return normalize_phone_number(cleaned)
        except:
            pass
        
        return hex_str
        
    except Exception as e:
        print(f"[ERROR] UCS2 phone decode failed: {e}")
        return hex_str
    
def normalize_phone_number(phone_str):
    """
    ‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢ (0xxxxxxxxx)
    
    Args:
        phone_str: ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏ä‡πà‡∏ô "+66653988461", "66653988461", "0653988461"
    
    Returns:
        str: ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô "0653988461"
    """
    if not phone_str or not isinstance(phone_str, str):
        return phone_str
    
    # ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©
    clean_phone = phone_str.strip().replace(" ", "").replace("-", "")
    
    # ‡∏Å‡∏£‡∏ì‡∏µ +66xxxxxxxxx -> 0xxxxxxxxx
    if clean_phone.startswith("+66"):
        return "0" + clean_phone[3:]
    
    # ‡∏Å‡∏£‡∏ì‡∏µ 66xxxxxxxxx -> 0xxxxxxxxx
    elif clean_phone.startswith("66") and len(clean_phone) == 11:
        return "0" + clean_phone[2:]
    
    # ‡∏Å‡∏£‡∏ì‡∏µ 0xxxxxxxxx (‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß)
    elif clean_phone.startswith("0") and len(clean_phone) == 10:
        return clean_phone
    
    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
    else:
        return phone_str

def get_carrier_from_imsi(imsi):
    """‡∏£‡∏∞‡∏ö‡∏∏‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å IMSI
    Args:
        imsi (str): IMSI number
    Returns:
        str: ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
    """
    if not imsi or len(imsi) < 5:
        return "Unknown"
    
    # ‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
    carrier_codes = {
        "52001": "AIS",
        "52005": "DTAC", 
        "52003": "TRUE",
        "52000": "CAT",
        "52015": "TOT",
        "52018": "dtac",
        "52023": "AIS",
        "52047": "NT"
    }
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 5 ‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏£‡∏Å
    mcc_mnc = imsi[:5]
    return carrier_codes.get(mcc_mnc, "Unknown")


def format_signal_strength(rssi):
    """‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ RSSI ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÅ‡∏ó‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
    
    Args:
        rssi (int): ‡∏Ñ‡πà‡∏≤ RSSI
        
    Returns:
        str: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏ó‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì Unicode
    """
    if rssi == 99:
        return '‚ñÅ‚ñÅ‚ñÅ‚ñÅ Unknown'
    elif rssi == 0:
        return '‚ñÅ‚ñÅ‚ñÅ‚ñÅ No Signal'
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô dBm
    dbm = -113 + 2 * rssi
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Unicode Signal Bars ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
    if dbm >= -70:
        return f'‚ñÅ‚ñÉ‚ñÖ‚ñà {dbm} dBm (Excellent)'      # 4 bars - ‡πÅ‡∏£‡∏á‡∏°‡∏≤‡∏Å
    elif dbm >= -85:
        return f'‚ñÅ‚ñÉ‚ñÖ‚ñá {dbm} dBm (Good)'          # 3 bars - ‡∏î‡∏µ
    elif dbm >= -100:
        return f'‚ñÅ‚ñÉ‚ñÅ‚ñÅ {dbm} dBm (Fair)'          # 2 bars - ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
    elif dbm >= -110:
        return f'‚ñÅ‚ñÅ‚ñÅ‚ñÅ {dbm} dBm (Poor)'          # 1 bar - ‡∏≠‡πà‡∏≠‡∏ô
    else:
        return f'‚ñÅ‚ñÅ‚ñÅ‚ñÅ {dbm} dBm (Very Poor)'     # No bars - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì


def get_signal_color_by_strength(signal_text):
    """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
    
    Args:
        signal_text (str): ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
        
    Returns:
        str: ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏µ hex
    """
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©
        if 'No SIM' in signal_text or 'SIM Not Ready' in signal_text:
            return '#95a5a6'  # ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤ - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ã‡∏¥‡∏°
        elif 'No Network' in signal_text:
            return '#e67e22'  # ‡∏™‡∏µ‡∏™‡πâ‡∏° - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢
        elif 'PIN Required' in signal_text:
            return '#f39c12'  # ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á - ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà PIN
        elif 'Error' in signal_text:
            return '#e74c3c'  # ‡∏™‡∏µ‡πÅ‡∏î‡∏á - ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        elif 'Unknown' in signal_text:
            return '#95a5a6'  # ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤ - ‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö bars pattern
        if '‚ñÅ‚ñÉ‚ñÖ‚ñà' in signal_text:
            return '#27ae60'  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏™‡∏î - Excellent
        elif '‚ñÅ‚ñÉ‚ñÖ‚ñá' in signal_text:
            return '#2ecc71'  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß - Good
        elif '‚ñÅ‚ñÉ‚ñÅ‚ñÅ' in signal_text:
            return '#f39c12'  # ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á/‡∏™‡πâ‡∏° - Fair
        elif '‚ñÅ‚ñÅ‚ñÅ‚ñÅ' in signal_text:
            if 'No Signal' in signal_text:
                return '#e74c3c'  # ‡πÅ‡∏î‡∏á - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
            else:
                return '#95a5a6'  # ‡πÄ‡∏ó‡∏≤ - Poor
        else:
            # Fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö dBm values
            match = re.search(r'-?(\d+)', signal_text)
            if not match:
                return '#95a5a6'
            dbm_value = -int(match.group(1))
            if dbm_value >= -70:
                return '#27ae60'
            elif dbm_value >= -85:
                return '#2ecc71'
            elif dbm_value >= -100:
                return '#f39c12'
            elif dbm_value >= -110:
                return '#e74c3c'
            else:
                return '#95a5a6'
    except (ValueError, AttributeError):
        return '#95a5a6'  # fallback color


def get_timestamp_formatted():
    """‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    
    Returns:
        str: ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD HH:MM:SS
    """
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")


def safe_get_attr(obj, attr_name, default="-"):
    """‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ attribute ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    
    Args:
        obj: ‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤
        attr_name (str): ‡∏ä‡∏∑‡πà‡∏≠ attribute
        default: ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ attribute
        
    Returns:
        ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á attribute ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    """
    return getattr(obj, attr_name, default) if hasattr(obj, attr_name) else default