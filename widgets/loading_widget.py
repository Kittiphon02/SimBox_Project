# loading_widget.py - Enhanced error handling
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QProgressBar, QFrame
)
from PyQt5.QtCore import Qt, QTimer, pyqtSignal
from PyQt5.QtGui import QFont

# ==================== IMPORT NEW STYLES ====================
from styles import LoadingWidgetStyles

class LoadingWidget(QWidget):
    finished = pyqtSignal(bool)  # True = ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, False = ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
    
    def __init__(self, message="Loading...", parent=None):
        super().__init__(parent)
        self.progress = 0
        self.is_loading = False
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_progress)
        self.current_step = 0
        self.steps = [
            {"progress": 15, "text": "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Modem..."},
            {"progress": 30, "text": "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ AT Commands..."},
            {"progress": 50, "text": "‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°..."},
            {"progress": 70, "text": "‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."},
            {"progress": 85, "text": "‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° SMS..."},
            {"progress": 95, "text": "‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô..."},
            {"progress": 100, "text": "‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"}
        ]
        self.setup_ui()
        self.apply_styles()  # ‡πÉ‡∏ä‡πâ‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
    
    def setup_ui(self):
        layout = QVBoxLayout()
        layout.setSpacing(15)
        layout.setContentsMargins(20, 20, 20, 20)
        
        # Header with Icon
        header_layout = QHBoxLayout()
        icon_label = QLabel("üì±")
        icon_label.setFont(QFont("Arial", 24))
        icon_label.setAlignment(Qt.AlignCenter)
        header_layout.addWidget(icon_label)
        
        self.title_label = QLabel("Sending SMS")
        self.title_label.setAlignment(Qt.AlignCenter)
        self.title_label.setFont(QFont("Arial", 15, QFont.Bold))
        header_layout.addWidget(self.title_label)
        header_layout.addStretch()
        layout.addLayout(header_layout)
        
        # Subtitle
        self.subtitle_label = QLabel("‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° SMS ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
        self.subtitle_label.setAlignment(Qt.AlignCenter)
        self.subtitle_label.setFont(QFont("Arial", 10))
        layout.addWidget(self.subtitle_label)
        
        # Progress Bar
        self.progress_bar = QProgressBar()
        self.progress_bar.setRange(0, 100)
        self.progress_bar.setTextVisible(True)
        self.progress_bar.setFixedHeight(25)
        layout.addWidget(self.progress_bar)
        
        # Progress Percentage
        self.percentage_label = QLabel("0%")
        self.percentage_label.setAlignment(Qt.AlignCenter)
        self.percentage_label.setFont(QFont("Arial", 12, QFont.Bold))
        layout.addWidget(self.percentage_label)
        
        # Status Frame
        status_frame = QFrame()
        status_frame.setFrameStyle(QFrame.Box)
        status_layout = QHBoxLayout()
        
        self.status_icon = QLabel("üîµ")
        self.status_icon.setFont(QFont("Arial", 16))
        status_layout.addWidget(self.status_icon)
        
        self.status_label = QLabel("‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")
        self.status_label.setFont(QFont("Arial", 11, QFont.Bold))
        status_layout.addWidget(self.status_label)
        status_layout.addStretch()
        status_frame.setLayout(status_layout)
        layout.addWidget(status_frame)
        
        # ‚≠ê Error Details Frame (hidden initially)
        self.error_frame = QFrame()
        self.error_frame.setFrameStyle(QFrame.Box)
        error_layout = QVBoxLayout()
        
        self.error_title = QLabel("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á SMS")
        self.error_title.setAlignment(Qt.AlignCenter)
        self.error_title.setFont(QFont("Arial", 12, QFont.Bold))
        error_layout.addWidget(self.error_title)
        
        self.error_detail = QLabel("")
        self.error_detail.setAlignment(Qt.AlignCenter)
        self.error_detail.setFont(QFont("Arial", 10))
        self.error_detail.setWordWrap(True)
        error_layout.addWidget(self.error_detail)
        
        self.error_suggestion = QLabel("")
        self.error_suggestion.setAlignment(Qt.AlignCenter)
        self.error_suggestion.setFont(QFont("Arial", 9))
        self.error_suggestion.setWordWrap(True)
        error_layout.addWidget(self.error_suggestion)
        
        self.error_frame.setLayout(error_layout)
        self.error_frame.hide()  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏ß‡πâ
        layout.addWidget(self.error_frame)
        
        # Error Label (old - for compatibility)
        self.error_label = QLabel("")
        self.error_label.setAlignment(Qt.AlignCenter)
        self.error_label.setFont(QFont("Arial", 12, QFont.Bold))
        self.error_label.hide()
        layout.addWidget(self.error_label)
        
        self.setLayout(layout)
        
        # ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö reference ‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö styling
        self.status_frame = status_frame
    
    def apply_styles(self):
        """‡πÉ‡∏ä‡πâ‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏ó‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£"""
        # Main Container
        self.setStyleSheet(LoadingWidgetStyles.get_main_container_style())
        
        # Title and Labels
        self.title_label.setStyleSheet(LoadingWidgetStyles.get_title_label_style())
        self.subtitle_label.setStyleSheet(LoadingWidgetStyles.get_subtitle_label_style())
        self.percentage_label.setStyleSheet(LoadingWidgetStyles.get_percentage_label_style())
        self.error_label.setStyleSheet(LoadingWidgetStyles.get_error_label_style())
        
        # ‚≠ê Error Frame Styles
        self.error_frame.setStyleSheet("""
            QFrame {
                background-color: #fff5f5;
                border: 2px solid #dc3545;
                border-radius: 8px;
                padding: 10px;
                margin: 5px;
            }
        """)
        self.error_title.setStyleSheet(LoadingWidgetStyles.get_error_label_style())
        self.error_detail.setStyleSheet("""
            QLabel {
                color: #721c24;
                font-size: 11px;
                margin: 5px;
            }
        """)
        self.error_suggestion.setStyleSheet("""
            QLabel {
                color: #6c757d;
                font-size: 9px;
                font-style: italic;
                margin: 5px;
            }
        """)
        
        # Status Frame and Label
        self.status_frame.setStyleSheet(LoadingWidgetStyles.get_status_frame_style())
        self.status_label.setStyleSheet(LoadingWidgetStyles.get_status_label_style())
        
        # Progress Bar (default style)
        self.progress_bar.setStyleSheet(LoadingWidgetStyles.get_progress_bar_style())
    
    def start_sending(self):
        self.is_loading = True
        self.error_label.hide()
        self.error_frame.hide()  # ‚≠ê ‡∏ã‡πà‡∏≠‡∏ô error frame
        self.progress = 0
        self.current_step = 0
        self.progress_bar.setValue(0)
        self.percentage_label.setText("0%")
        self.status_label.setText("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á...")
        self.status_icon.setText("üü°")
        
        # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡πÑ‡∏ï‡∏•‡πå progress bar ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥
        self.progress_bar.setStyleSheet(LoadingWidgetStyles.get_progress_bar_style())
        self.subtitle_label.setText("‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° SMS ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
        self.timer.start(150)
    
    def update_progress(self):
        if not self.is_loading:
            return
        self.progress += 3.7
        if self.progress >= 100:
            self.progress = 100
            self.complete_sending_success()
            return
        self.progress_bar.setValue(int(self.progress))
        self.percentage_label.setText(f"{int(self.progress)}%")
        for i, step in enumerate(self.steps):
            if self.progress >= step["progress"] and i > self.current_step:
                self.current_step = i
                self.status_label.setText(step["text"])
                break
    
    def update_status(self, status_text):
        self.status_label.setText(status_text)
    
    def complete_sending_success(self):
        self.timer.stop()
        self.is_loading = False
        self.error_label.hide()
        self.error_frame.hide()  # ‚≠ê ‡∏ã‡πà‡∏≠‡∏ô error frame
        self.progress_bar.setValue(100)
        self.percentage_label.setText("100%")
        self.status_label.setText("‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        self.status_icon.setText("‚úÖ")
        
        # ‡πÉ‡∏ä‡πâ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        self.progress_bar.setStyleSheet(LoadingWidgetStyles.get_progress_bar_success_style())
        self.finished.emit(True)
    
    def complete_sending_error(self, error_msg):
        """‚≠ê Enhanced error handling with detailed information"""
        self.timer.stop()
        self.is_loading = False
        
        # ‡∏ã‡πà‡∏≠‡∏ô error label ‡πÄ‡∏Å‡πà‡∏≤ ‡πÅ‡∏™‡∏î‡∏á error frame ‡πÉ‡∏´‡∏°‡πà
        self.error_label.hide()
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        self._show_detailed_error(error_msg)
        
        self.status_label.setText("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")
        self.status_icon.setText("‚ùå")
        
        # ‡πÉ‡∏ä‡πâ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        self.progress_bar.setStyleSheet(LoadingWidgetStyles.get_progress_bar_error_style())
        self.finished.emit(False)
    
    def _show_detailed_error(self, error_msg):
        """‚≠ê ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
        # ‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        error_type, suggestion = self._categorize_error(error_msg)
        
        self.error_detail.setText(error_type)
        self.error_suggestion.setText(suggestion)
        self.error_frame.show()
    
    def _categorize_error(self, error_msg):
        """‚≠ê ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"""
        error_lower = error_msg.lower()
        
        if 'sim' in error_lower:
            if '‡πÑ‡∏°‡πà‡∏°‡∏µ' in error_msg or 'no sim' in error_lower:
                return (
                    "üî¥ ‡πÑ‡∏°‡πà‡∏û‡∏ö SIM Card ‡∏´‡∏£‡∏∑‡∏≠ SIM ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
                    "üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SIM Card ‚Ä¢ ‡∏Ñ‡∏•‡∏¥‡∏Å 'Refresh Ports' ‚Ä¢ ‡∏•‡∏≠‡∏á 'SIM Recovery'"
                )
            elif 'not ready' in error_lower or '‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°' in error_msg:
                return (
                    "üü† SIM Card ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
                    "üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà ‚Ä¢ ‡∏Ñ‡∏•‡∏¥‡∏Å 'SIM Recovery' ‚Ä¢ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì"
                )
            else:
                return (
                    "üî¥ SIM Card ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤",
                    "üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SIM Card ‚Ä¢ ‡∏Ñ‡∏•‡∏¥‡∏Å 'SIM Recovery' ‚Ä¢ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô SIM"
                )
        
        elif 'serial' in error_lower or 'connection' in error_lower or '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠' in error_msg:
            return (
                "üî¥ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢",
                "üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏≤‡∏¢ USB ‚Ä¢ ‡∏Ñ‡∏•‡∏¥‡∏Å 'Refresh Ports' ‚Ä¢ ‡πÄ‡∏™‡∏µ‡∏¢‡∏ö‡πÉ‡∏´‡∏°‡πà"
            )
        
        elif 'signal' in error_lower or 'network' in error_lower or '‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì' in error_msg:
            return (
                "üü† ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏≠‡πà‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢",
                "üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏î‡∏µ ‚Ä¢ ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢ ‚Ä¢ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
            )
        
        elif 'timeout' in error_lower or '‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤' in error_msg:
            return (
                "üü° ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á",
                "üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏•‡∏≠‡∏á‡∏™‡πà‡∏á‡πÉ‡∏´‡∏°‡πà ‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì ‚Ä¢ ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÇ‡∏°‡πÄ‡∏î‡πá‡∏°"
            )
        
        elif 'at+' in error_lower or 'command' in error_lower:
            return (
                "üî¥ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á AT ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
                "üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏Ñ‡∏•‡∏¥‡∏Å 'Refresh Ports' ‚Ä¢ ‡πÄ‡∏ä‡πá‡∏Ñ Baudrate ‚Ä¢ ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÇ‡∏°‡πÄ‡∏î‡πá‡∏°"
            )
        
        else:
            return (
                f"üî¥ {error_msg}",
                "üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏Ñ‡∏•‡∏¥‡∏Å 'Refresh Ports' ‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ‚Ä¢ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà"
            )