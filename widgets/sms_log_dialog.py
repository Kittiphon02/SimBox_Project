from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QVBoxLayout, QWidget, QHBoxLayout, QLineEdit,
    QPushButton, QLabel, QComboBox, QGroupBox, QSizePolicy, QMessageBox,
    QTableWidget, QTableWidgetItem, QHeaderView, QDialog, QTextEdit, QFileDialog,
    QDateEdit, QCheckBox, QFrame, QSpacerItem, QShortcut, QFileDialog, QAbstractItemView
)
from PyQt5.QtCore import Qt, QEvent, QDate, pyqtSignal, QTimer
from PyQt5.QtGui import QFont, QPalette, QColor, QKeySequence, QBrush
import sys, os, csv, time, re
from datetime import datetime, timedelta
from styles import SmsLogDialogStyles
import json
from pathlib import Path
import portalocker
from core.utility_functions import normalize_phone_number
from services.sms_log import list_logs
import sip

# --- helper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Fail ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ---
FAIL_KEYWORDS = [
    "‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", "‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á",
    "fail", "failed", "error", "timeout", "time out", "not sent",
    "denied", "reject", "rejected", "cancel", "cancelled", "no route", "no service",
    "no sim", "pin required", "no signal", "no network", "connection"
]
def _is_fail_row(row: dict) -> bool:
    try:
        if int(row.get("is_failed", 0) or 0) == 1:
            return True
    except Exception:
        pass
    st = (row.get("status") or "").lower()
    return any(k in st for k in FAIL_KEYWORDS)


def get_log_directory_from_settings():
    """‡∏î‡∏∂‡∏á log directory ‡∏à‡∏≤‡∏Å settings.json"""
    try:
        from services.sms_log import get_log_directory
        return get_log_directory()
    except Exception as e:
        print(f"Error getting log directory: {e}")
        return "./log"

_cfg_path = Path(__file__).parent / "settings.json"
try:
    LOG_DIR = Path(get_log_directory_from_settings())
except:
    LOG_DIR = Path(__file__).parent / "log"

class SmsLogDialog(QDialog):
    """‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ SMS ‡∏ó‡∏µ‡πà‡πÄ‡∏ô‡πâ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å (‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢) - ‡πÇ‡∏ó‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£"""
    send_sms_requested = pyqtSignal(str, str)
    last_export_dir = None

    def __init__(self, filter_phone=None, parent=None):
        super().__init__(parent)
        
        # ==================== 1. INITIALIZATION ====================
        self.filter_phone = filter_phone
        self.all_data = []
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
        self.setWindowTitle("üì± SMS History Manager | ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")
        self.resize(1000, 700)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á main layout
        self.main_layout = QVBoxLayout(self)
        self.main_layout.setSpacing(8)
        self.main_layout.setContentsMargins(15, 15, 15, 15)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ signals
        self.setup_simplified_ui()
        self.setup_connections()
        self.apply_styles()  # ‡πÉ‡∏ä‡πâ‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        QTimer.singleShot(100, self.load_log)
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ double click event
        self.table.cellDoubleClicked.connect(self.handle_row_double_clicked)

        self._poll = QTimer(self)
        self._poll.setInterval(2000)
        self._poll.timeout.connect(self.load_log)
        self._poll.start()

        self._init_csv_watch()
    
    def _init_csv_watch(self):
        try:
            from services.sms_log_store import READ_FROM_CSV, get_csv_file_path
        except Exception:
            return
        if not READ_FROM_CSV:
            return
        import os
        self._csv_path = get_csv_file_path()
        # ‚ú® ‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á dt ‚Üí date,time ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏ó‡∏≥‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤)
        try:
            self._migrate_sim_csv_dt_to_date_time(self._csv_path)
        except Exception:
            pass
        
        self._csv_mtime = os.path.getmtime(self._csv_path) if os.path.exists(self._csv_path) else None
        self._csv_timer = QTimer(self)
        self._csv_timer.setInterval(3000)  # 3 ‡∏ß‡∏¥
        def _tick():
            if not os.path.exists(self._csv_path): return
            m = os.path.getmtime(self._csv_path)
            if self._csv_mtime is None:
                self._csv_mtime = m; return
            if m != self._csv_mtime:
                self._csv_mtime = m
                self.load_log()
        self._csv_timer.timeout.connect(_tick)
        self._csv_timer.start()

    # ==================== 2. UI SETUP ====================
    def setup_simplified_ui(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ UI ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ - Enhanced version"""
        # ==================== SEARCH SECTION (‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏ô‡∏™‡∏∏‡∏î) ====================
        search_section = self.create_search_section()
        self.main_layout.addWidget(search_section)
        
        # ==================== CONTROL SECTION ====================
        control_section = self.create_simple_control_section()
        self.main_layout.addWidget(control_section)
        
        # ==================== TABLE SECTION ====================
        table_section = self.create_maximized_table_section()
        self.main_layout.addWidget(table_section, stretch=20)
        
        # ==================== FOOTER SECTION ====================
        footer = self.create_footer_section()
        self.main_layout.addWidget(footer)
        
        # ‚≠ê ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ search shortcuts
        self.setup_search_shortcuts()

    def create_search_section(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á section ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå/‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° - ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ñ‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å"""
        search_widget = QWidget()
        search_widget.setMinimumHeight(80)  # ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏•‡∏á
        search_widget.setMaximumHeight(90)
        
        layout = QHBoxLayout(search_widget)
        layout.setSpacing(15)
        layout.setContentsMargins(20, 15, 20, 15)

        # Search label
        search_label = QLabel("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:")
        search_label.setFixedWidth(80)
        search_label.setStyleSheet("""
            QLabel {
                font-size: 15px;
                font-weight: bold;
                color: #721c24;
                padding: 5px;
            }
        """)
        layout.addWidget(search_label)

        # Search input
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°...")
        self.search_input.setMinimumHeight(40)
        self.search_input.setMaximumHeight(45)
        self.search_input.textChanged.connect(self.apply_search_filter)
        layout.addWidget(self.search_input)

        # Search button
        self.search_button = QPushButton("üîç Search")
        self.search_button.setFixedWidth(100)
        self.search_button.setMinimumHeight(40)
        self.search_button.setMaximumHeight(45)
        self.search_button.clicked.connect(self.apply_search_filter)
        layout.addWidget(self.search_button)

        # Clear button
        self.clear_search_button = QPushButton("‚úñ Clear")
        self.clear_search_button.setFixedWidth(80)
        self.clear_search_button.setMinimumHeight(40)
        self.clear_search_button.setMaximumHeight(45)
        self.clear_search_button.clicked.connect(self.clear_search)
        layout.addWidget(self.clear_search_button)
        
        # ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö reference ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö styling
        self.search_widget = search_widget
        self.search_label = search_label

        return search_widget

    def apply_search_filter(self):
        """‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ - Enhanced phone number search"""
        query = self.search_input.text().strip().lower()
        visible_count = 0
        
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        if not query:
            for row in range(self.table.rowCount()):
                self.table.setRowHidden(row, False)
                visible_count += 1
            self.update_status_label(visible_count)
            return
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        is_phone_search = self._is_phone_number_query(query)
        
        if is_phone_search:
            # ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
            normalized_phones = self._generate_phone_variations(query)
            print(f"üîç Phone search variations: {normalized_phones}")
        
        for row in range(self.table.rowCount()):
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
            phone_item = self.table.item(row, 2)
            msg_item = self.table.item(row, 3)
            
            if phone_item and msg_item:
                phone = phone_item.text().lower()
                msg = msg_item.text().lower()
                
                show = False
                
                if is_phone_search:
                    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÅ‡∏ö‡∏ö flexible
                    show = self._match_phone_numbers(phone, normalized_phones)
                else:
                    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
                    show = (query in phone) or (query in msg)
                
                self.table.setRowHidden(row, not show)
                
                if show:
                    visible_count += 1
            else:
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ã‡πà‡∏≠‡∏ô‡πÅ‡∏ñ‡∏ß
                self.table.setRowHidden(row, True)
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        self.update_status_label(visible_count)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        if query:
            search_type = "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£" if is_phone_search else "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"
            print(f"üîç Search for {search_type} '{query}': Found {visible_count} results")

    def quick_filter(self):
        """‡∏Å‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: PHONE(‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 2) ‡πÅ‡∏•‡∏∞ MESSAGE(‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 3)"""
        # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ txt_search ‡πÅ‡∏•‡∏∞ search_input
        search_box = getattr(self, "txt_search", None) or getattr(self, "search_input", None)
        q = (search_box.text() if search_box else "").strip().lower()

        visible = 0
        for r in range(self.table.rowCount()):
            # ‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏ñ‡∏ß placeholder "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" ‡πÉ‡∏´‡πâ‡∏ã‡πà‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô
            it0 = self.table.item(r, 0)
            if it0 and "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" in (it0.text() or ""):
                self.table.setRowHidden(r, bool(q))
                continue

            phone = (self.table.item(r, 2).text() if self.table.item(r, 2) else "").lower()
            msg   = (self.table.item(r, 3).text() if self.table.item(r, 3) else "").lower()

            show = (q == "") or (q in phone) or (q in msg)
            self.table.setRowHidden(r, not show)
            if show:
                visible += 1

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà)
        try:
            self.update_status_label(visible)
        except Exception:
            pass

    def on_search_clicked(self):
        self.quick_filter()

    def on_clear_clicked(self):
        if hasattr(self, "txt_search"):
            self.txt_search.clear()
        self.quick_filter()

    def _is_phone_number_query(self, query):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà - Enhanced Version"""
        if not query:
            return False
        
        # ‡∏•‡∏ö‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏≠‡∏≠‡∏Å
        clean_query = ''.join(filter(str.isdigit, query))
        
        # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
        obvious_phone_patterns = [
            query.startswith('+66'),
            query.startswith('66') and len(clean_query) >= 11,
            query.startswith('0') and len(clean_query) >= 9,
            len(clean_query) == 9 or len(clean_query) == 10,
            len(clean_query) == 11 and clean_query.startswith('66'),
            len(clean_query) == 12 and clean_query.startswith('66')
        ]
        
        if any(obvious_phone_patterns):
            print(f"üîç Obvious phone pattern detected for: '{query}'")
            return True
        
        if len(clean_query) >= 3:
            digit_ratio = len(clean_query) / len(query) if len(query) > 0 else 0
            
            if digit_ratio >= 0.7:
                print(f"üîç High digit ratio detected for: '{query}' ({digit_ratio:.2f})")
                return True
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏µ‡∏î/‡∏ß‡∏£‡∏£‡∏Ñ
        phone_pattern_regex = r'^[\d\s\-\+\(\)]{7,}$'
        import re
        if re.match(phone_pattern_regex, query) and len(clean_query) >= 7:
            print(f"üîç Phone pattern regex match for: '{query}'")
            return True
        
        return False

    def _generate_phone_variations(self, query):
        variations = set()
        clean_digits = ''.join(filter(str.isdigit, query))
        
        if not clean_digits:
            return [query]  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏•‡∏¢ ‡πÉ‡∏ä‡πâ query ‡πÄ‡∏î‡∏¥‡∏°
        
        print(f"üì± DEBUG: Processing phone query '{query}' -> digits '{clean_digits}'")
        
        # === ‡∏Å‡∏£‡∏ì‡∏µ‡∏û‡∏¥‡πÄ‡∏®‡∏©: ‡πÄ‡∏ö‡∏≠‡∏£‡πå 10 ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 0 ===
        if clean_digits.startswith('0') and len(clean_digits) == 10:
            # 0653988461 -> ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏∏‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
            phone_without_zero = clean_digits[1:]  # 653988461
            
            variations.add(clean_digits)  # 0653988461
            variations.add(phone_without_zero)  # 653988461
            variations.add(f'+66{phone_without_zero}')  # +66653988461
            variations.add(f'66{phone_without_zero}')  # 66653988461
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏µ‡∏î/‡∏ß‡∏£‡∏£‡∏Ñ
            variations.add(f'0{phone_without_zero[:2]}-{phone_without_zero[2:5]}-{phone_without_zero[5:]}')  # 065-398-8461
            variations.add(f'0{phone_without_zero[:2]} {phone_without_zero[2:5]} {phone_without_zero[5:]}')  # 065 398 8461
            
            print(f"üì± Generated variations for 10-digit: {variations}")
        
        # === ‡∏Å‡∏£‡∏ì‡∏µ 1: ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ +66 ===
        elif query.startswith('+66'):
            # +66653988461 -> 0653988461, 653988461, +66653988461
            if len(clean_digits) >= 11 and clean_digits.startswith('66'):
                national_number = '0' + clean_digits[2:]  # 0653988461
                phone_only = clean_digits[2:]  # 653988461
                
                variations.add(national_number)
                variations.add(phone_only)
                variations.add(f'+66{phone_only}')
                variations.add(f'66{phone_only}')
                variations.add(query)  # ‡πÄ‡∏Å‡πá‡∏ö original ‡∏î‡πâ‡∏ß‡∏¢
        
        # === ‡∏Å‡∏£‡∏ì‡∏µ 2: ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 66 (‡πÑ‡∏°‡πà‡∏°‡∏µ +) ===
        elif clean_digits.startswith('66') and len(clean_digits) >= 11:
            # 66653988461 -> 0653988461, 653988461, +66653988461
            phone_only = clean_digits[2:]  # 653988461
            national_number = '0' + phone_only  # 0653988461
            
            variations.add(national_number)
            variations.add(phone_only)
            variations.add(f'+{clean_digits}')  # +66653988461
            variations.add(f'+66{phone_only}')
            variations.add(clean_digits)  # 66653988461
        
        # === ‡∏Å‡∏£‡∏ì‡∏µ 3: ‡πÄ‡∏•‡∏Ç 9 ‡∏´‡∏•‡∏±‡∏Å (‡πÑ‡∏°‡πà‡∏°‡∏µ 0 ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤) ===
        elif len(clean_digits) == 9 and not clean_digits.startswith('0'):
            # 653988461 -> 0653988461, +66653988461, 66653988461
            variations.add(f'0{clean_digits}')  # 0653988461
            variations.add(clean_digits)  # 653988461
            variations.add(f'+66{clean_digits}')  # +66653988461
            variations.add(f'66{clean_digits}')  # 66653988461
        
        # === ‡∏Å‡∏£‡∏ì‡∏µ 4: ‡πÄ‡∏•‡∏Ç‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô) ===
        elif len(clean_digits) >= 3:
            variations.add(clean_digits)
            variations.add(query.lower())  # ‡πÄ‡∏Å‡πá‡∏ö query ‡πÄ‡∏î‡∏¥‡∏°
            
            # ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 0 ‡πÅ‡∏•‡∏∞‡∏°‡∏µ 4+ ‡∏´‡∏•‡∏±‡∏Å
            if clean_digits.startswith('0') and len(clean_digits) >= 4:
                without_zero = clean_digits[1:]
                variations.add(without_zero)
                variations.add(f'+66{without_zero}')
                variations.add(f'66{without_zero}')
            
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 0 ‡πÅ‡∏•‡∏∞‡∏°‡∏µ 3+ ‡∏´‡∏•‡∏±‡∏Å
            elif not clean_digits.startswith('0') and len(clean_digits) >= 3:
                variations.add(f'0{clean_digits}')
                variations.add(f'+66{clean_digits}')
                variations.add(f'66{clean_digits}')
        
        # === ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏û‡∏¥‡πÄ‡∏®‡∏© ===
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° query ‡πÄ‡∏î‡∏¥‡∏°‡∏î‡πâ‡∏ß‡∏¢ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏û‡∏¥‡πÄ‡∏®‡∏©)
        variations.add(query.lower())
        variations.add(query.upper())
        variations.add(clean_digits)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏µ‡∏î/‡∏ß‡∏£‡∏£‡∏Ñ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô query ‡πÄ‡∏î‡∏¥‡∏°)
        if '-' in query or ' ' in query:
            variations.add(query)
            variations.add(query.replace('-', '').replace(' ', ''))
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö normalized
        try:
            from core.utility_functions import normalize_phone_number
            normalized = normalize_phone_number(query)
            if normalized:
                variations.add(normalized)
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡∏à‡∏≤‡∏Å normalized
                if normalized.startswith('0') and len(normalized) == 10:
                    without_zero = normalized[1:]
                    variations.add(without_zero)
                    variations.add(f'+66{without_zero}')
                    variations.add(f'66{without_zero}')
        except Exception as e:
            print(f"Warning: normalize_phone_number error: {e}")
        
        result = list(variations)
        print(f"üì± Final phone variations for '{query}': {result}")
        return result

    def _match_phone_numbers(self, phone_in_table, search_variations):
        if not phone_in_table or not search_variations:
            return False
        
        # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô lowercase ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        phone_lower = phone_in_table.lower().strip()
        phone_clean = phone_in_table.replace('-', '').replace(' ', '').replace('(', '').replace(')', '').strip()
        
        print(f"üîç Matching '{phone_in_table}' against {len(search_variations)} variations")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°
        for variation in search_variations:
            variation_str = str(variation).lower().strip()
            variation_clean = variation_str.replace('-', '').replace(' ', '').replace('(', '').replace(')', '')
            
            # 1. ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ (exact match)
            if phone_lower == variation_str or phone_clean.lower() == variation_clean:
                print(f"‚úÖ Exact match: '{phone_in_table}' == '{variation}'")
                return True
            
            # 2. ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏ö‡∏ö contains (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô)
            if len(variation_clean) >= 3:
                if variation_clean in phone_clean.lower() or phone_clean.lower() in variation_clean:
                    print(f"‚úÖ Contains match: '{phone_in_table}' contains '{variation}'")
                    return True
        
        # 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö normalize ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ù‡∏±‡πà‡∏á
        phone_digits = ''.join(filter(str.isdigit, phone_in_table))
        
        for variation in search_variations:
            variation_digits = ''.join(filter(str.isdigit, str(variation)))
            
            if variation_digits and len(variation_digits) >= 3:
                # ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏ö‡∏ö exact digits
                if phone_digits == variation_digits:
                    print(f"‚úÖ Digits exact match: '{phone_digits}' == '{variation_digits}'")
                    return True
                
                # ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏ö‡∏ö contains digits (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô)
                if len(variation_digits) >= 7:  # ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏¢‡∏≤‡∏ß‡πÜ
                    if variation_digits in phone_digits or phone_digits in variation_digits:
                        print(f"‚úÖ Digits contains match: '{phone_digits}' ~ '{variation_digits}'")
                        return True
        
        # 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö fuzzy match ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏û‡∏¥‡πÄ‡∏®‡∏©
        try:
            from core.utility_functions import normalize_phone_number
            
            normalized_table = normalize_phone_number(phone_in_table)
            
            for variation in search_variations:
                normalized_variation = normalize_phone_number(str(variation))
                
                if normalized_table and normalized_variation:
                    if normalized_table == normalized_variation:
                        print(f"‚úÖ Normalized match: '{normalized_table}' == '{normalized_variation}'")
                        return True
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
                    if len(normalized_variation) >= 7:
                        if normalized_variation in normalized_table or normalized_table in normalized_variation:
                            print(f"‚úÖ Normalized contains: '{normalized_table}' ~ '{normalized_variation}'")
                            return True
        except Exception as e:
            print(f"Warning: normalize check error: {e}")
        
        return False

    def clear_search(self):
        """‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î - Enhanced version"""
        self.search_input.clear()
        
        # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ñ‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        visible_count = 0
        for row in range(self.table.rowCount()):
            self.table.setRowHidden(row, False)
            
            # ‡∏ô‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            first_item = self.table.item(row, 0)
            if first_item and not ("‡πÑ‡∏°‡πà‡∏°‡∏µ" in first_item.text() or "üîç" in first_item.text()):
                visible_count += 1
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        self.update_status_label(visible_count)
        
        print("üóëÔ∏è Search cleared - showing all data")

    def get_search_stats(self):
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"""
        query = self.search_input.text().strip()
        total_rows = self.table.rowCount()
        visible_rows = 0
        hidden_rows = 0
        
        for row in range(total_rows):
            if self.table.isRowHidden(row):
                hidden_rows += 1
            else:
                visible_rows += 1
        
        return {
            'query': query,
            'total': total_rows,
            'visible': visible_rows,
            'hidden': hidden_rows,
            'is_phone_search': self._is_phone_number_query(query) if query else False
        }

    def highlight_search_results(self, query):
        """‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)"""
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï - ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        pass

    def setup_search_shortcuts(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ keyboard shortcuts ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"""
        
        # Ctrl+F ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö focus ‡∏ó‡∏µ‡πà search box
        search_shortcut = QShortcut(QKeySequence("Ctrl+F"), self)
        search_shortcut.activated.connect(lambda: self.search_input.setFocus())
        
        # Escape ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö clear search
        clear_shortcut = QShortcut(QKeySequence("Escape"), self)
        clear_shortcut.activated.connect(self.clear_search)
        
        # F3 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡πà‡∏≠ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        next_shortcut = QShortcut(QKeySequence("F3"), self)
        next_shortcut.activated.connect(self.apply_search_filter)

    def create_simple_control_section(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ - ‡πÄ‡∏Å‡πá‡∏ö SMS Fail option ‡πÑ‡∏ß‡πâ"""
        control_widget = QWidget()
        control_widget.setObjectName("control_container")   # ‚Üê ‡∏Å‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏ç‡πà

        hlayout = QHBoxLayout(control_widget)
        hlayout.setSpacing(15)
        hlayout.setContentsMargins(15, 10, 15, 10)

        # ---------- ‡∏ö‡∏•‡πá‡∏≠‡∏Å "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó" ----------
        self.category_container = QWidget()
        self.category_container.setObjectName("category_block")   # ‚Üê ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏¢‡πà‡∏≠‡∏¢
        cat_layout = QHBoxLayout(self.category_container)
        cat_layout.setContentsMargins(0, 0, 0, 0)
        cat_layout.setSpacing(8)

        label_history = QLabel("üìÇ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:")
        cat_layout.addWidget(label_history)

        self.combo = QComboBox()
        self.combo.addItems([
            "üì§ SMS Send",
            "üì• SMS Inbox",
            "‚ùå SMS Fail"
        ])
        self.combo.setFixedWidth(150)
        self.combo.setFixedHeight(32)
        self.combo.currentIndexChanged.connect(self.load_log)
        cat_layout.addWidget(self.combo)

        hlayout.addWidget(self.category_container)

        # ---------- ‡∏ö‡∏•‡πá‡∏≠‡∏Å "‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö" ----------
        self.order_container = QWidget()
        self.order_container.setObjectName("sort_block")    # ‚Üê ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏¢‡πà‡∏≠‡∏¢
        order_layout = QHBoxLayout(self.order_container)
        order_layout.setContentsMargins(0, 0, 0, 0)
        order_layout.setSpacing(8)

        sort_label = QLabel("üîÑ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö:")
        order_layout.addWidget(sort_label)

        self.sort_combo = QComboBox()
        self.sort_combo.addItems([
            "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÉ‡∏´‡∏°‡πà)",
            "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ (‡πÄ‡∏Å‡πà‡∏≤)"
        ])
        self.sort_combo.setFixedWidth(200)
        self.sort_combo.setFixedHeight(32)
        self.sort_combo.currentIndexChanged.connect(self.apply_sort_filter)
        order_layout.addWidget(self.sort_combo)

        hlayout.addWidget(self.order_container)

        hlayout.addStretch()

        # ‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô apply_styles()
        self.control_widget = control_widget
        self.label_history = label_history
        self.sort_label = sort_label

        return control_widget

    def create_maximized_table_section(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á table section ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î - ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå"""
        self.table = QTableWidget(0, 4)
        self.table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.table.setSelectionMode(QAbstractItemView.MultiSelection)   # ‡∏Ñ‡∏•‡∏¥‡∏Å = toggle, ‡πÑ‡∏°‡πà‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏¥‡∏°
        self.table.setEditTriggers(QAbstractItemView.NoEditTriggers)    # ‡∏Å‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏µ‡∏´‡∏≤‡∏¢

        self.table.setHorizontalHeaderLabels(['üìÖ DATE', 'üïê TIME', 'üì± PHONE', 'üí¨ MESSAGE'])
        
        header = self.table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeToContents)  # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        header.setSectionResizeMode(1, QHeaderView.ResizeToContents)  # ‡πÄ‡∏ß‡∏•‡∏≤
        
        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏û‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå 10 ‡∏´‡∏•‡∏±‡∏Å
        header.setSectionResizeMode(2, QHeaderView.Fixed)
        self.table.setColumnWidth(2, 130)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô 130px
        
        header.setSectionResizeMode(3, QHeaderView.Stretch)  # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°)

        self.table.setMinimumHeight(500)
        self.table.verticalHeader().setDefaultSectionSize(45)
        self.table.cellDoubleClicked.connect(self.handle_row_double_clicked)

        return self.table

    def create_footer_section(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á footer section - Enhanced version"""
        footer_widget = QWidget()
        btn_layout = QHBoxLayout()
        btn_layout.setSpacing(10)
        btn_layout.setContentsMargins(5, 5, 5, 5)
        
        # Status label
        self.status_label = QLabel("üìä ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: 0")
        btn_layout.addWidget(self.status_label)
        
        btn_layout.addStretch()
        
        # --- ‡∏õ‡∏∏‡πà‡∏° Delete ---
        self.btn_delete = self.create_button("üóë Delete", 120)
        self.btn_delete.setToolTip("‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ó‡πá‡∏ö (Send/Inbox/Fail)")
        self.btn_delete.clicked.connect(self.on_delete_clicked)
        btn_layout.addWidget(self.btn_delete)

        # ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        btn_refresh = self.create_button("üîÑ Refresh", 120)
        btn_refresh.clicked.connect(self.load_log)
        btn_layout.addWidget(btn_refresh)

        btn_export = self.create_button("üìä Export All", 120)
        btn_export.clicked.connect(self.export_to_excel)
        btn_export.setToolTip("Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        btn_layout.addWidget(btn_export)
        
        btn_close = self.create_button("‚ùå Close", 120)
        btn_close.clicked.connect(self.close)
        btn_layout.addWidget(btn_close)
        
        footer_widget.setLayout(btn_layout)
        footer_widget.setMaximumHeight(60)
        
        # ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö reference ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö styling/‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
        self.footer_widget = footer_widget
        self.btn_delete = self.btn_delete
        self.btn_refresh = btn_refresh
        self.btn_export = btn_export
        self.btn_close = btn_close
        
        return footer_widget

    def create_button(self, text, width=None):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô"""
        button = QPushButton(text)
        if width:
            button.setFixedWidth(width)
        button.setFixedHeight(40)
        return button

    def apply_styles(self):
        """‡πÉ‡∏ä‡πâ‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏ó‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£ - Enhanced version"""
        # Dialog main style
        self.setStyleSheet(SmsLogDialogStyles.get_dialog_style())
        
        # Control section
        self.control_widget.setStyleSheet(SmsLogDialogStyles.get_control_section_style())
        self.label_history.setStyleSheet(SmsLogDialogStyles.get_control_label_style())
        self.sort_label.setStyleSheet(SmsLogDialogStyles.get_control_label_style())
        
        # ComboBoxes
        self.combo.setStyleSheet(SmsLogDialogStyles.get_combo_box_style())
        self.sort_combo.setStyleSheet(SmsLogDialogStyles.get_combo_box_style())
        
        # Table styles
        self.table.setStyleSheet(SmsLogDialogStyles.get_table_style())
        self.table.horizontalHeader().setStyleSheet(SmsLogDialogStyles.get_table_header_style())
        
        # Status label
        self.status_label.setStyleSheet(SmsLogDialogStyles.get_status_label_style())
        
        # Footer
        self.footer_widget.setStyleSheet(SmsLogDialogStyles.get_footer_style())
        
        # Buttons
        self.btn_delete.setStyleSheet(SmsLogDialogStyles.get_delete_button_style())
        self.btn_refresh.setStyleSheet(SmsLogDialogStyles.get_info_button_style())
        self.btn_export.setStyleSheet(SmsLogDialogStyles.get_success_button_style())
        self.btn_close.setStyleSheet(SmsLogDialogStyles.get_danger_button_style())

    def setup_connections(self):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ signals ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢"""
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ComboBox ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
        self.sort_combo.currentIndexChanged.connect(self.apply_sort_filter)

    # ==================== 3. UTILITY FUNCTIONS ====================
    def darken_color(self, color, factor=0.2):
        """‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏™‡∏µ‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏∂‡πâ‡∏ô"""
        return SmsLogDialogStyles.darken_color(color, factor)

    def normalize_phone(self, phone):
        """‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£"""
        phone = phone.replace('-', '').replace(' ', '')
        if phone.startswith('+66'):
            phone = phone[3:]
        elif phone.startswith('66'):
            phone = phone[2:]
        return phone.lstrip('0')

    def parse_date_from_string(self, date_str):
        """‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô datetime object - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏µ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"""
        try:
            if ',' in date_str:
                date_part, time_part = date_str.split(',')
                y, m, d = date_part.split('/')
                year = int(y)
                
                # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏µ
                if year < 100:
                    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô YY format
                    if year >= 50:  # 50-99 = 1950-1999
                        year += 1900
                    else:  # 00-49 = 2000-2049
                        year += 2000
                
                return datetime.strptime(f"{year:04d}-{m}-{d} {time_part}", "%Y-%m-%d %H:%M:%S")
            else:
                return datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")
        except Exception as e:
            print(f"[‚ùå Date parse failed] {date_str} | {e}")
            return None

    def update_status_label(self, custom_count=None):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"""
        try:
            if custom_count is not None:
                # ‡πÉ‡∏ä‡πâ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤)
                total_items = custom_count
            else:
                # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà
                total_items = 0
                for row in range(self.table.rowCount()):
                    if not self.table.isRowHidden(row):
                        total_items += 1
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if total_items == 1:
                    first_item = self.table.item(0, 0)
                    if first_item and ("‡πÑ‡∏°‡πà‡∏°‡∏µ" in first_item.text() or "üîç" in first_item.text()):
                        total_items = 0
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            search_query = self.search_input.text().strip()
            if search_query:
                self.status_label.setText(f"üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ '{search_query}': {total_items} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            else:
                self.status_label.setText(f"üìä ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_items}")
                
        except Exception as e:
            print(f"Error updating status label: {e}")
            self.status_label.setText("üìä ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: 0")
            
    # ==================== 4. DATA LOADING ====================
    def clear_table(self):
        """‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á + ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå buffer/‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö"""
        try:
            self.table.setRowCount(0)
        except Exception:
            pass
        self.all_data = []
        if hasattr(self, "total_label") and self.total_label is not None:
            self.total_label.setText("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: 0")

    def _render_rows(self, rows, direction):
        self.table.setRowCount(len(rows))
        self.all_data = []

        for i, r in enumerate(rows):
            raw_dt = r.get('dt')
            if hasattr(raw_dt, 'strftime'):
                dt_obj = raw_dt
                date = dt_obj.strftime("%d/%m/%Y")
                time_str = dt_obj.strftime("%H:%M:%S")
            else:
                if direction == 'sent':
                    date, time_str, dt_obj = self.parse_sent_datetime(str(raw_dt or ""))
                else:
                    date, time_str, dt_obj = self.parse_inbox_datetime(str(raw_dt or ""))

            phone = r.get("phone") or ""
            msg   = r.get("message") or ""

            # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á items ‡πÅ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            it_date  = QTableWidgetItem(date)
            it_time  = QTableWidgetItem(time_str)
            it_phone = QTableWidgetItem(phone)
            it_msg   = QTableWidgetItem(msg)

            if getattr(self, "combo", None) and self.combo.currentIndex() == 2:
                red_fg   = QBrush(QColor(220, 53, 69))
                light_bg = QBrush(QColor(255, 235, 238))
                for it in (it_date, it_time, it_phone, it_msg):
                    it.setForeground(red_fg)
                    it.setBackground(light_bg)

            # ‡πÉ‡∏™‡πà‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
            self.table.setItem(i, 0, it_date)
            self.table.setItem(i, 1, it_time)
            self.table.setItem(i, 2, it_phone)
            self.table.setItem(i, 3, it_msg)

            # ‚úÖ ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏Ñ‡∏≠‡∏°‡∏°‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á "message": msg
            self.all_data.append({
                "date": date,
                "time": time_str,
                "phone": phone,
                "message": msg,
                "datetime": dt_obj,
                "status": r.get("status") or "",
                "is_failed": int(r.get("is_failed", 0) or 0),
            })

        if hasattr(self, "total_label") and self.total_label is not None:
            self.total_label.setText(f"‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(rows)}")

    def _inbox_has_data(self) -> bool:
        """‡∏Ñ‡∏∑‡∏ô True ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ SMS inbox ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡πÅ‡∏ñ‡∏ß"""
        try:
            from services.sms_log import list_logs
            return bool(list_logs(direction="inbox", limit=1))
        except Exception:
            return False
    
    def load_log(self):
        # ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö (0:send, 1:inbox, 2:fail)
        idx = self.combo.currentIndex()
        cat = {0: "send", 1: "inbox", 2: "fail"}.get(idx, "inbox")

        # ‡∏î‡∏∂‡∏á order ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏á (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏±‡πâ‡∏á sort_combo / order_combo)
        order = "DESC"
        try:
            combo = getattr(self, "sort_combo", None) or getattr(self, "order_combo", None)
            if combo:
                txt = (combo.currentText() or "").strip().upper()
                order = "ASC" if ("‡πÄ‡∏Å‡πà‡∏≤" in txt or txt == "ASC") else "DESC"
        except Exception:
            pass

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
        direction = "inbox" if cat == "inbox" else "sent"
        try:
            rows = list_logs(direction=direction, limit=5000, order=order) or []
        except Exception as e:
            print(f"DB error: {e}")
            self.show_error_message(e)
            return

        self.all_data = []
        for r in rows:
            raw_dt = r.get("dt")

            # --- ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Send ---
            if hasattr(raw_dt, "strftime"):
                dt_obj = raw_dt
                date = dt_obj.strftime("%d/%m/%Y")
                time_str = dt_obj.strftime("%H:%M:%S")
            else:
                s = str(raw_dt or "")
                if direction == "inbox":
                    # ‡πÉ‡∏ä‡πâ parser inbox (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö 'YYYY-MM-DD HH:MM:SS' ‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö GSM)
                    date, time_str, dt_obj = self.parse_inbox_datetime(s)
                else:
                    date, time_str, dt_obj = self.parse_sent_datetime(s)

            # ‡∏ò‡∏á fail
            try:
                is_failed = 1 if _is_fail_row(r) else 0
            except NameError:
                # fallback ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ helper
                is_failed = int(r.get("is_failed", 0) or 0)

            # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏£‡∏Ñ‡∏≠‡∏£‡πå‡∏î
            rec = {
                "row_id": r.get("id"), 
                "date": date,
                "time": time_str,
                "phone": r.get("phone") or "",
                "message": r.get("message") or "",
                "datetime": dt_obj,             # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sort/filter
                "status": r.get("status") or "",
                "is_failed": is_failed,
            }

            if cat == "fail":
                if rec["is_failed"] == 1:
                    self.all_data.append(rec)
            else:
                # send / inbox
                self.all_data.append(rec)

        # --- ‡∏Å‡∏é‡∏û‡∏¥‡πÄ‡∏®‡∏©: ‡∏ñ‡πâ‡∏≤ Inbox ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏ï‡πà Send/Fail ‡πÑ‡∏°‡πà‡∏°‡∏µ ‚Üí ‡∏´‡∏ô‡πâ‡∏≤ Send/Fail ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ ---
        if cat in ("send", "fail") and not self.all_data and self._inbox_has_data():
            self.clear_table()           # ‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ñ‡∏ß "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
            self.update_status_label(0)
            return

        # Inbox ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚Üí ‡πÉ‡∏´‡πâ‡πÇ‡∏ä‡∏ß‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        if cat == "inbox" and not self.all_data:
            self.display_filtered_data([])    # ‡∏à‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ SMS ‡πÄ‡∏Ç‡πâ‡∏≤"
            self.update_status_label(0)
            return

        # ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö/‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå/‡∏ß‡∏≤‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°
        self.apply_sort_filter()

    def _is_failed_sms(self, status):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ SMS ‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        if not status:
            return False
        
        status_lower = status.lower()
        
        # ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        failed_keywords = [
            '‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß', 'fail', 'error', 'failed',
            '‡πÑ‡∏°‡πà‡∏°‡∏µ sim', 'no sim', 'sim not ready', 'pin required',
            'no signal', 'no network', 'timeout', 'connection'
        ]
        
        return any(keyword in status_lower for keyword in failed_keywords)

    def show_error_message(self, message):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error"""
        self.table.setRowCount(1)
        self.table.setItem(0, 0, QTableWidgetItem("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"))
        self.table.setItem(0, 1, QTableWidgetItem(""))
        self.table.setItem(0, 2, QTableWidgetItem(""))
        self.table.setItem(0, 3, QTableWidgetItem(str(message)))
        for col in range(4):
            it = self.table.item(0, col)
            if it:
                it.setTextAlignment(Qt.AlignCenter)
                it.setForeground(QColor(231, 76, 60))
        self.update_status_label()

    def parse_sent_datetime(self, dt_str):
        """‡πÅ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô parse ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sent - ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD HH:MM:SS"""
        try:
            dt = datetime.strptime(dt_str, "%Y-%m-%d %H:%M:%S")
            # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô DD/MM/YYYY
            date = dt.strftime("%d/%m/%Y")
            time = dt.strftime("%H:%M:%S")
            return date, time, dt
        except:
            return dt_str, "", None

    def parse_inbox_datetime(self, dt_str):
        s = (dt_str or "").strip()

        # 1) ‡∏•‡∏≠‡∏á‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡πÅ‡∏ö‡∏ö DB ‡∏Å‡πà‡∏≠‡∏ô: YYYY-MM-DD HH:MM:SS
        try:
            dt = datetime.strptime(s[:19], "%Y-%m-%d %H:%M:%S")
            return dt.strftime("%d/%m/%Y"), dt.strftime("%H:%M:%S"), dt
        except Exception:
            pass

        # 2) ‡∏•‡∏≠‡∏á‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡πÅ‡∏ö‡∏ö GSM: DD/MM/YY,HH:MM:SS+zz
        try:
            if "," not in s:
                return s, "", None

            dpart, tpart = s.split(",", 1)
            time_str = tpart.split("+", 1)[0].strip()

            parts = dpart.split("/")
            if len(parts) != 3:
                return s, "", None

            dd, mm, yy = int(parts[0]), int(parts[1]), int(parts[2])

            # ‡∏õ‡∏µ 2 ‡∏´‡∏•‡∏±‡∏Å -> 4 ‡∏´‡∏•‡∏±‡∏Å
            if parts[2].isdigit() and len(parts[2]) == 2:
                cur_yy = datetime.now().year % 100
                yyyy = 2000 + yy if yy <= cur_yy else 1900 + yy
            else:
                yyyy = yy

            dt = datetime.strptime(f"{yyyy:04d}-{mm:02d}-{dd:02d} {time_str}", "%Y-%m-%d %H:%M:%S")
            return dt.strftime("%d/%m/%Y"), dt.strftime("%H:%M:%S"), dt
        except Exception:
            return s, "", None

    def _split_dt_parts(self, s: str):
        """‡∏£‡∏±‡∏ö‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏∑‡∏ô (date, time) ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢"""
        s = (str(s or "").strip().replace("T", " ").replace("\u200b", ""))
        if " " in s:
            d, t = s.split(" ", 1)
            return d.strip(), t.strip()
        return s, ""

    def _migrate_sim_csv_dt_to_date_time(self, path: str):
        import os, csv
        if not path or not os.path.exists(path):
            return

        with open(path, "r", newline="", encoding="utf-8") as f:
            try:
                reader = csv.DictReader(f)
                fields = reader.fieldnames or []
            except Exception:
                return

            # ‡πÑ‡∏°‡πà‡∏°‡∏µ 'dt' ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ date/time ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
            if "dt" not in fields or ("date" in fields and "time" in fields):
                return

            rows = list(reader)

        # ‡πÅ‡∏¢‡∏Å dt ‚Üí date,time
        for r in rows:
            d, t = self._split_dt_parts(r.get("dt", ""))
            r["date"], r["time"] = d, t
            r.pop("dt", None)

        new_fields = ["id", "date", "time", "direction", "phone", "message", "status"]
        with open(path, "w", newline="", encoding="utf-8") as f:
            w = csv.DictWriter(f, fieldnames=new_fields, extrasaction="ignore")
            w.writeheader()
            for r in rows:
                w.writerow({k: r.get(k, "") for k in new_fields})

    # ==================== 5. DATA FILTERING & SORTING ====================
    def apply_sort_filter(self):
        """‡πÉ‡∏ä‡πâ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö"""
        try:
            if not self.all_data:
                print("No data to sort")
                return
                
            print(f"Sorting data, count: {len(self.all_data)}, sort index: {self.sort_combo.currentIndex()}")
            
            # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            filtered_data = self.all_data.copy()
            idx = self.combo.currentIndex()
            
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô SMS Fail ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏£‡∏Ñ‡∏≠‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ò‡∏á is_failed = 1
            if idx == 2:
                filtered_data = [d for d in filtered_data if int(d.get('is_failed', 0) or 0) == 1]

            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            if self.sort_combo.currentIndex() == 0:  # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÉ‡∏´‡∏°‡πà ‚Üí ‡πÄ‡∏Å‡πà‡∏≤)
                filtered_data.sort(key=lambda x: x['datetime'] if x['datetime'] else datetime.min, reverse=True)
                print("Sorted: latest first")
            else:  # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ (‡πÄ‡∏Å‡πà‡∏≤ ‚Üí ‡πÉ‡∏´‡∏°‡πà)
                filtered_data.sort(key=lambda x: x['datetime'] if x['datetime'] else datetime.min, reverse=False)
                print("Sorted: oldest first")
            
            self.display_filtered_data(filtered_data)
            self.update_status_label()
            
        except Exception as e:
            print(f"Error applying sort filter: {e}")
            import traceback
            traceback.print_exc()

    # ==================== 6. TABLE DISPLAY ====================
    def display_filtered_data(self, data):
        # ‡πÄ‡∏Å‡πá‡∏ö row_id ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
        selected_ids = set()
        try:
            sm = self.table.selectionModel()
            if sm is not None:
                for mi in sm.selectedRows():
                    it0 = self.table.item(mi.row(), 0)
                    if it0 is not None:
                        rid = it0.data(Qt.UserRole)
                        if rid is not None:
                            selected_ids.add(int(rid))
        except Exception:
            pass

        self.table.setRowCount(0)
        idx = self.combo.currentIndex()

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        if not data:
            self.table.setRowCount(1)
            if idx == 2:      # SMS Fail
                no_data_msg, icon = "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ SMS ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‚úÖ"
            elif idx == 1:    # SMS Inbox
                no_data_msg, icon = "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ SMS ‡πÄ‡∏Ç‡πâ‡∏≤", "üì•"
            else:             # SMS Send
                no_data_msg, icon = "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ SMS ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å", "üì§"

            self.table.setItem(0, 0, QTableWidgetItem(f"{icon} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"))
            self.table.setItem(0, 1, QTableWidgetItem(""))
            self.table.setItem(0, 2, QTableWidgetItem(""))
            self.table.setItem(0, 3, QTableWidgetItem(no_data_msg))

            for col in range(4):
                it = self.table.item(0, col)
                if it:
                    it.setTextAlignment(Qt.AlignCenter)
                    it.setForeground(QColor(46, 204, 113) if idx == 2 else QColor(127, 140, 141))
            return

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        make_fail_red = (idx == 2)

        for row_idx, item in enumerate(data):
            self.table.insertRow(row_idx)

            # DATE
            date_item = QTableWidgetItem(item.get("date", ""))
            date_item.setTextAlignment(Qt.AlignCenter)
            self.table.setItem(row_idx, 0, date_item)

            # TIME
            time_item = QTableWidgetItem(item.get("time", ""))
            time_item.setTextAlignment(Qt.AlignCenter)
            self.table.setItem(row_idx, 1, time_item)

            # PHONE
            phone_display = item.get("phone") or "Unknown"
            phone_item = QTableWidgetItem(phone_display)
            phone_item.setTextAlignment(Qt.AlignCenter)
            phone_item.setToolTip(phone_display)
            self.table.setItem(row_idx, 2, phone_item)

            # MESSAGE
            message_item = QTableWidgetItem(item.get("message", ""))
            message_item.setTextAlignment(Qt.AlignLeft | Qt.AlignVCenter)
            self.table.setItem(row_idx, 3, message_item)

            # ---- ‡∏ó‡∏≥‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß Fail (‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á 4 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå) ----
            if make_fail_red:
                red_fg   = QColor(231, 76, 60)
                light_bg = QColor(253, 237, 238)
                for it in (date_item, time_item, phone_item, message_item):
                    it.setForeground(red_fg)
                    it.setBackground(light_bg)

            # ‡∏ù‡∏±‡∏á row_id (‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏∑‡∏ô selection ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡∏ö)
            row_id = item.get("row_id")
            if row_id is not None:
                for col in range(4):
                    cell_item = self.table.item(row_idx, col)
                    if cell_item:
                        cell_item.setData(Qt.UserRole, int(row_id))

            # ‡∏Ñ‡∏∑‡∏ô selection ‡∏ñ‡πâ‡∏≤ row ‡∏ô‡∏µ‡πâ‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ
            if row_id is not None and int(row_id) in selected_ids:
                self.table.selectRow(row_idx)

            # ‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏ñ‡∏ß‡∏õ‡∏Å‡∏ï‡∏¥ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Fail)
            if not make_fail_red and (row_idx % 2 == 0):
                bg = QColor(248, 249, 250)
                for col in range(4):
                    cell_item = self.table.item(row_idx, col)
                    if cell_item:
                        cell_item.setBackground(bg)
            
            # ----- ‡∏ó‡πâ‡∏≤‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á -----
            # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏á‡∏ã‡πâ‡∏≥‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏Å‡∏±‡∏ô‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡πâ‡∏á‡πÇ‡∏ä‡∏ß‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
            search_box = getattr(self, "txt_search", None) or getattr(self, "search_input", None)
            if search_box and search_box.text().strip():
                self.quick_filter()

    # ==================== 7. EVENT HANDLERS ====================
    def handle_row_double_clicked(self, row, col):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£ double click ‡∏ö‡∏ô‡πÅ‡∏ñ‡∏ß"""
        phone_item = self.table.item(row, 2)
        msg_item = self.table.item(row, 3)
        if phone_item and msg_item:
            phone = phone_item.text()
            message = msg_item.text()
            self.send_sms_requested.emit(phone, message)
        self.accept()

    def on_row_double_clicked(self, row, col):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£ double click ‡∏ö‡∏ô‡πÅ‡∏ñ‡∏ß (‡∏≠‡∏µ‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ)"""
        # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        phone = self.table.item(row, 2).text()
        message = self.table.item(row, 3).text()
        # ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ main
        self.send_sms_requested.emit(phone, message)
        # ‡∏õ‡∏¥‡∏î dialog
        self.accept()
    
    def on_delete_clicked(self):
        try:
            from services.sms_log import delete_selected, delete_all, vacuum_db
        except Exception as e:
            QMessageBox.warning(self, "Delete Error", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏î‡πâ: {e}")
            return

        # ‡πÅ‡∏ó‡πá‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        idx = self.combo.currentIndex() if hasattr(self, "combo") else 0
        view = {0: "send", 1: "inbox", 2: "fail"}.get(idx, "send")
        direction = "inbox" if view == "inbox" else "sent"

        # id ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        sel = self.table.selectionModel()
        sel_rows = sorted({mi.row() for mi in sel.selectedRows()}) if sel else []
        chosen_ids = []
        for r in sel_rows:
            it0 = self.table.item(r, 0)
            if it0:
                rid = it0.data(Qt.UserRole)
                if rid is not None:
                    chosen_ids.append(int(rid))

        # ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∞‡πÑ‡∏£ ‚Üí ‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ó‡πá‡∏ö
        if not chosen_ids:
            only_failed = (view == "fail")  # ‡∏•‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ fail ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á sent
            label_map = {
                "send": "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ SMS ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
                "inbox": "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ SMS ‡πÄ‡∏Ç‡πâ‡∏≤",
                "fail": "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ SMS ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            }
            msg = f"‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö{label_map.get(view, '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ')} ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"
            if QMessageBox.question(
                self, "Confirm Delete", msg, QMessageBox.Yes | QMessageBox.No, QMessageBox.No
            ) != QMessageBox.Yes:
                return

            try:
                deleted = delete_all(direction=direction, only_failed=only_failed)
                vacuum_db()
            except Exception as e:
                QMessageBox.warning(self, "Delete Error", f"‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
                return

            # ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä & ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•
            self.load_log()
            try:
                n = int(deleted) if deleted is not None else None
            except Exception:
                n = None
            if isinstance(n, int) and n >= 0:
                QMessageBox.information(self, "‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡∏•‡∏ö {n} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            else:
                QMessageBox.information(self, "‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            return

        # ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‚Üí ‡∏•‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        if QMessageBox.question(
            self,
            "Confirm Delete",
            f"‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö {len(chosen_ids)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No,
        ) != QMessageBox.Yes:
            return

        try:
            deleted = delete_selected(direction, chosen_ids)
            vacuum_db()
        except Exception as e:
            QMessageBox.warning(self, "Delete Error", f"‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
            return

        # ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä & ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•
        self.load_log()
        try:
            n = int(deleted) if deleted is not None else len(chosen_ids)
        except Exception:
            n = len(chosen_ids)
        QMessageBox.information(self, "‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡∏•‡∏ö {n} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

    # ==================== 8. EXPORT FUNCTIONS ====================
    def export_to_excel(self):
        """Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á Excel - ‡πÄ‡∏Å‡πá‡∏ö SMS Fail ‡πÑ‡∏ß‡πâ"""
        try:
            import pandas as pd
        except ImportError:
            QMessageBox.warning(
                self, 
                "üìä Export Error", 
                "‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á pandas ‡∏Å‡πà‡∏≠‡∏ô\n\n‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: pip install pandas"
            )
            return
        
        row_count = self.table.rowCount()
        if row_count == 0 or (row_count == 1 and not self.table.item(0, 0)):
            QMessageBox.information(
                self, 
                "üìä Export", 
                "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞ Export ‡∏Å‡πà‡∏≠‡∏ô"
            )
            return
        
        data = []
        headers = ['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', '‡πÄ‡∏ß‡∏•‡∏≤', '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£', '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°']
        
        for row in range(row_count):
            # ‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ã‡πà‡∏≠‡∏ô (‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤)
            if self.table.isRowHidden(row):
                continue
                
            row_data = []
            empty_row = True
            for col in range(4):
                item = self.table.item(row, col)
                txt = item.text() if item else ''
                if txt and "‡πÑ‡∏°‡πà‡∏°‡∏µ" not in txt and "üîç" not in txt and "‚ùå" not in txt and "‚úÖ" not in txt:
                    empty_row = False
                row_data.append(txt)
            if not empty_row:
                data.append(row_data)
        
        if not data:
            QMessageBox.information(
                self, 
                "üìä Export", 
                "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ Export"
            )
            return
        
        df = pd.DataFrame(data, columns=headers)
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå default
        if SmsLogDialog.last_export_dir and os.path.exists(SmsLogDialog.last_export_dir):
            initial_dir = SmsLogDialog.last_export_dir
        elif LOG_DIR.exists():
            initial_dir = str(LOG_DIR)
        else:
            initial_dir = os.path.join(os.path.expanduser("~"), "Desktop")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        idx = self.combo.currentIndex()
        
        # ‚≠ê ‡πÄ‡∏Å‡πá‡∏ö SMS Fail case ‡πÑ‡∏ß‡πâ
        if idx == 2:
            sms_type = "failed"
            type_name = "Failed SMS"
        elif idx == 1:
            sms_type = "inbox"
            type_name = "SMS Inbox"
        else:
            sms_type = "sent"
            type_name = "SMS Sent"
            
        filename = f"sms_{sms_type}_log_{timestamp}.xlsx"
        
        path, _ = QFileDialog.getSaveFileName(
            self,
            f"üìä Export {type_name}",
            os.path.join(initial_dir, filename),
            "Excel Files (*.xlsx);;CSV Files (*.csv);;All Files (*)"
        )
        
        if not path:
            return
        
        SmsLogDialog.last_export_dir = os.path.dirname(path)
        
        try:
            if path.endswith('.csv'):
                df.to_csv(path, index=False, encoding='utf-8-sig')
            else:
                df.to_excel(path, index=False)
                
            QMessageBox.information(
                self, 
                "‚úÖ Export ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", 
                f"üìä Export {type_name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!\n\n"
                f"üìÅ ‡πÑ‡∏ü‡∏•‡πå: {os.path.basename(path)}\n"
                f"üìÇ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: {os.path.dirname(path)}\n"
                f"üìã ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: {len(data)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
            )
        except Exception as e:
            QMessageBox.critical(
                self, 
                "‚ùå Export Error", 
                f"üí• Export {type_name} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n"
                f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}\n\n"
                f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:\n"
                f"‚Ä¢ ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏≠‡∏∑‡πà‡∏ô\n"
                f"‚Ä¢ ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏±‡πâ‡∏ô\n"
                f"‚Ä¢ ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏™‡∏Å‡πå‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠"
            )

    # ==================== 9. WINDOW EVENT HANDLERS ====================
    def closeEvent(self, event):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á SMS Log"""
        event.accept()
        self.deleteLater()


# ==================== MAIN EXECUTION ====================
if __name__ == "__main__":
    app = QApplication(sys.argv)
    dialog = SmsLogDialog()
    dialog.show()
    sys.exit(app.exec_())