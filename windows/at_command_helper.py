# at_command_helper.py
"""
AT Command Helper Dialog - ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á AT ‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°
"""

from PyQt5.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, 
    QScrollArea, QWidget, QFrame, QTextEdit, QTabWidget,
    QGroupBox, QGridLayout
)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QFont, QPixmap, QIcon


class ATCommandHelperDialog(QDialog):
    """Dialog ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á AT"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setup_ui()
        self.apply_styles()
    
    def setup_ui(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á UI components"""
        self.setWindowTitle("üìã AT Command Helper")
        self.setMinimumSize(700, 500)
        self.setModal(True)
        
        layout = QVBoxLayout(self)
        
        # Header
        self.create_header(layout)
        
        # Main content with tabs
        self.create_tabs(layout)
        
        # Footer with buttons
        self.create_footer(layout)
    
    def create_header(self, layout):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß"""
        header_frame = QFrame()
        header_layout = QHBoxLayout()
        
        # Icon
        icon_label = QLabel("üìã")
        icon_label.setFont(QFont("Arial", 24))
        header_layout.addWidget(icon_label)
        
        # Title and description
        title_layout = QVBoxLayout()
        title_label = QLabel("AT Command Helper")
        title_label.setFont(QFont("Arial", 18, QFont.Bold))
        
        desc_label = QLabel("‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á AT ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡πá‡∏° GSM/3G/4G")
        desc_label.setFont(QFont("Arial", 11))
        
        title_layout.addWidget(title_label)
        title_layout.addWidget(desc_label)
        header_layout.addLayout(title_layout)
        header_layout.addStretch()
        
        header_frame.setLayout(header_layout)
        layout.addWidget(header_frame)
        
        # Store references for styling
        self.header_frame = header_frame
        self.title_label = title_label
        self.desc_label = desc_label
    
    def create_tabs(self, layout):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á tabs ‡πÅ‡∏¢‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á"""
        self.tab_widget = QTabWidget()
        
        # Tab 1: Basic Commands
        self.create_basic_tab()
        
        # Tab 2: SMS Commands
        self.create_sms_tab()
        
        # Tab 3: Network Commands
        self.create_network_tab()
        
        # Tab 4: Special Commands
        self.create_special_tab()
        
        layout.addWidget(self.tab_widget)
    
    def create_basic_tab(self):
        """Tab ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"""
        tab = QScrollArea()
        content = QWidget()
        layout = QVBoxLayout()
        
        # Basic commands data
        basic_commands = [
            {
                "command": "AT",
                "description": "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡πá‡∏°",
                "example": "AT",
                "response": "OK",
                "usage": "‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡πá‡∏°‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"
            },
            {
                "command": "ATI",
                "description": "‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏°‡πÄ‡∏î‡πá‡∏°",
                "example": "ATI",
                "response": "Manufacturer: SIMCOM INCORPORATED\nModel: SIMCOM_SIM7600G-H",
                "usage": "‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏ú‡∏•‡∏¥‡∏ï‡πÅ‡∏•‡∏∞‡∏£‡∏∏‡πà‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡πá‡∏°"
            },
            {
                "command": "AT+CGMI",
                "description": "‡∏î‡∏π‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ú‡∏•‡∏¥‡∏ï‡πÇ‡∏°‡πÄ‡∏î‡πá‡∏°",
                "example": "AT+CGMI",
                "response": "SIMCOM INCORPORATED",
                "usage": "‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ú‡∏π‡πâ‡∏ú‡∏•‡∏¥‡∏ï‡πÇ‡∏°‡πÄ‡∏î‡πá‡∏°"
            },
            {
                "command": "AT+CGMM",
                "description": "‡∏î‡∏π‡∏£‡∏∏‡πà‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡πá‡∏°",
                "example": "AT+CGMM",
                "response": "SIMCOM_SIM7600G-H",
                "usage": "‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∏‡πà‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡πá‡∏°"
            },
            {
                "command": "AT+CGMR",
                "description": "‡∏î‡∏π‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ü‡∏¥‡∏£‡πå‡∏°‡πÅ‡∏ß‡∏£‡πå",
                "example": "AT+CGMR",
                "response": "SIM7600M22_V1.1.0",
                "usage": "‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏ü‡∏¥‡∏£‡πå‡∏°‡πÅ‡∏ß‡∏£‡πå‡πÇ‡∏°‡πÄ‡∏î‡πá‡∏°"
            },
            {
                "command": "AT+CGSN",
                "description": "‡∏î‡∏π‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç IMEI",
                "example": "AT+CGSN",
                "response": "860384063639006",
                "usage": "‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç IMEI ‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡πá‡∏°"
            }
        ]
        
        for cmd_info in basic_commands:
            group = self.create_command_group(cmd_info)
            layout.addWidget(group)
        
        layout.addStretch()
        content.setLayout(layout)
        tab.setWidget(content)
        tab.setWidgetResizable(True)
        
        self.tab_widget.addTab(tab, "üîß ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô")
    
    def create_sms_tab(self):
        """Tab ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SMS"""
        tab = QScrollArea()
        content = QWidget()
        layout = QVBoxLayout()
        
        sms_commands = [
            {
                "command": "AT+CMGF=1",
                "description": "‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î SMS ‡πÅ‡∏ö‡∏ö Text",
                "example": "AT+CMGF=1",
                "response": "OK",
                "usage": "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ SMS ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤"
            },
            {
                "command": "AT+CMGS",
                "description": "‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° SMS",
                "example": 'AT+CMGS="0812345678"',
                "response": "> (‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)\n‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ\nCtrl+Z",
                "usage": "‡∏™‡πà‡∏á SMS ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏"
            },
            {
                "command": "AT+CMGL",
                "description": "‡∏≠‡πà‡∏≤‡∏ô SMS ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
                "example": 'AT+CMGL="ALL"',
                "response": "+CMGL: 1,\"REC READ\",\"+66812345678\"...",
                "usage": "‡πÅ‡∏™‡∏î‡∏á SMS ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ã‡∏¥‡∏°‡∏Å‡∏≤‡∏£‡πå‡∏î"
            },
            {
                "command": "AT+CMGR",
                "description": "‡∏≠‡πà‡∏≤‡∏ô SMS ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                "example": "AT+CMGR=1",
                "response": "+CMGR: \"REC READ\",\"+66812345678\"...",
                "usage": "‡∏≠‡πà‡∏≤‡∏ô SMS ‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"
            },
            {
                "command": "AT+CMGD",
                "description": "‡∏•‡∏ö SMS",
                "example": "AT+CMGD=1,4",
                "response": "OK",
                "usage": "‡∏•‡∏ö SMS (1=‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á, 4=‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)"
            },
            {
                "command": "AT+CSCS",
                "description": "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°",
                "example": 'AT+CSCS="UCS2"',
                "response": "OK",
                "usage": "‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ"
            }
        ]
        
        for cmd_info in sms_commands:
            group = self.create_command_group(cmd_info)
            layout.addWidget(group)
        
        layout.addStretch()
        content.setLayout(layout)
        tab.setWidget(content)
        tab.setWidgetResizable(True)
        
        self.tab_widget.addTab(tab, "üì± ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SMS")
    
    def create_network_tab(self):
        """Tab ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢"""
        tab = QScrollArea()
        content = QWidget()
        layout = QVBoxLayout()
        
        network_commands = [
            {
                "command": "AT+CSQ",
                "description": "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì",
                "example": "AT+CSQ",
                "response": "+CSQ: 20,99",
                "usage": "‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì (0-31, 99=‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö)"
            },
            {
                "command": "AT+CPIN?",
                "description": "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ SIM PIN",
                "example": "AT+CPIN?",
                "response": "+CPIN: READY",
                "usage": "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ SIM ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà PIN"
            },
            {
                "command": "AT+CNUM",
                "description": "‡∏î‡∏π‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå SIM",
                "example": "AT+CNUM",
                "response": '+CNUM: "","0812345678",129',
                "usage": "‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏Ç‡∏≠‡∏á SIM ‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà‡∏≠‡∏¢‡∏π‡πà"
            },
            {
                "command": "AT+CIMI",
                "description": "‡∏î‡∏π‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç IMSI",
                "example": "AT+CIMI",
                "response": "520050231128663",
                "usage": "‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç IMSI ‡∏Ç‡∏≠‡∏á SIM"
            },
            {
                "command": "AT+CCID",
                "description": "‡∏î‡∏π‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç ICCID",
                "example": "AT+CCID",
                "response": "89660525024875100552",
                "usage": "‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç ICCID ‡∏Ç‡∏≠‡∏á SIM"
            },
            {
                "command": "AT+CREG?",
                "description": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢",
                "example": "AT+CREG?",
                "response": "+CREG: 0,1",
                "usage": "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢"
            },
            {
                "command": "AT+COPS?",
                "description": "‡∏î‡∏π‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢",
                "example": "AT+COPS?",
                "response": '+COPS: 0,0,"dtac"',
                "usage": "‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà"
            }
        ]
        
        for cmd_info in network_commands:
            group = self.create_command_group(cmd_info)
            layout.addWidget(group)
        
        layout.addStretch()
        content.setLayout(layout)
        tab.setWidget(content)
        tab.setWidgetResizable(True)
        
        self.tab_widget.addTab(tab, "üì° ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢")
    
    def create_special_tab(self):
        """Tab ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©"""
        tab = QScrollArea()
        content = QWidget()
        layout = QVBoxLayout()
        
        special_commands = [
            {
                "command": "AT+RUN",
                "description": "‡πÄ‡∏£‡∏¥‡πà‡∏° SMS Real-time Monitor",
                "example": "AT+RUN",
                "response": "[AT+RUN] SMS Real-time monitoring started",
                "usage": "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ô‡∏µ‡πâ - ‡πÄ‡∏õ‡∏¥‡∏î SMS Monitor"
            },
            {
                "command": "AT+STOP",
                "description": "‡∏´‡∏¢‡∏∏‡∏î SMS Real-time Monitor",
                "example": "AT+STOP",
                "response": "[AT+STOP] SMS Real-time monitoring stopped",
                "usage": "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ô‡∏µ‡πâ - ‡∏´‡∏¢‡∏∏‡∏î SMS Monitor"
            },
            {
                "command": "AT+CLEAR",
                "description": "‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå SMS Monitor Display",
                "example": "AT+CLEAR",
                "response": "[AT+CLEAR] SMS Real-time monitoring cleared",
                "usage": "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ô‡∏µ‡πâ - ‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ Monitor"
            },
            {
                "command": "AT+CFUN=0",
                "description": "‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡πá‡∏°",
                "example": "AT+CFUN=0",
                "response": "OK",
                "usage": "‡∏õ‡∏¥‡∏î‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡πá‡∏°"
            },
            {
                "command": "AT+CFUN=1",
                "description": "‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡πá‡∏°",
                "example": "AT+CFUN=1",
                "response": "OK",
                "usage": "‡πÄ‡∏õ‡∏¥‡∏î‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡πá‡∏°"
            },
            {
                "command": "ATZ",
                "description": "‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÇ‡∏°‡πÄ‡∏î‡πá‡∏°",
                "example": "ATZ",
                "response": "OK",
                "usage": "‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÇ‡∏°‡πÄ‡∏î‡πá‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"
            }
        ]
        
        for cmd_info in special_commands:
            group = self.create_command_group(cmd_info)
            layout.addWidget(group)
        
        # Add usage tips
        tips_group = self.create_tips_section()
        layout.addWidget(tips_group)
        
        layout.addStretch()
        content.setLayout(layout)
        tab.setWidget(content)
        tab.setWidgetResizable(True)
        
        self.tab_widget.addTab(tab, "‚ö° ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©")
    
    def create_command_group(self, cmd_info):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á group ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á"""
        group = QGroupBox(f"üîπ {cmd_info['command']}")
        layout = QVBoxLayout()
        
        # Description
        desc_label = QLabel(f"üìù {cmd_info['description']}")
        desc_label.setWordWrap(True)
        desc_label.setFont(QFont("Arial", 11, QFont.Bold))
        layout.addWidget(desc_label)
        
        # Usage
        usage_label = QLabel(f"üí° {cmd_info['usage']}")
        usage_label.setWordWrap(True)
        usage_label.setFont(QFont("Arial", 10))
        layout.addWidget(usage_label)
        
        # Example and Response
        example_layout = QHBoxLayout()
        
        # Example
        example_frame = QFrame()
        example_frame.setFrameStyle(QFrame.Box)
        example_layout_inner = QVBoxLayout()
        
        example_header = QLabel("üì§ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:")
        example_header.setFont(QFont("Arial", 9, QFont.Bold))
        example_layout_inner.addWidget(example_header)
        
        example_text = QLabel(cmd_info['example'])
        example_text.setFont(QFont("Courier New", 10))
        example_text.setStyleSheet("background-color: #f0f0f0; padding: 5px; border-radius: 3px;")
        example_layout_inner.addWidget(example_text)
        
        example_frame.setLayout(example_layout_inner)
        example_layout.addWidget(example_frame)
        
        # Response
        response_frame = QFrame()
        response_frame.setFrameStyle(QFrame.Box)
        response_layout_inner = QVBoxLayout()
        
        response_header = QLabel("üì• ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:")
        response_header.setFont(QFont("Arial", 9, QFont.Bold))
        response_layout_inner.addWidget(response_header)
        
        response_text = QLabel(cmd_info['response'])
        response_text.setFont(QFont("Courier New", 10))
        response_text.setStyleSheet("background-color: #e8f5e8; padding: 5px; border-radius: 3px;")
        response_text.setWordWrap(True)
        response_layout_inner.addWidget(response_text)
        
        response_frame.setLayout(response_layout_inner)
        example_layout.addWidget(response_frame)
        
        layout.addLayout(example_layout)
        
        group.setLayout(layout)
        return group
    
    def create_tips_section(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"""
        tips_group = QGroupBox("üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        layout = QVBoxLayout()
        
        tips_text = QTextEdit()
        tips_text.setReadOnly(True)
        tips_text.setMaximumHeight(150)
        
        tips_content = """
            üî∏ ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° SIM Management System:

            ‚Ä¢ ‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á AT ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á "AT Command" ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î "Send AT"
            ‚Ä¢ ‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á "Response"
            ‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á AT+RUN ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î SMS Monitor ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            ‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á AT+STOP ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î SMS Monitor
            ‚Ä¢ ‡∏´‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡πá‡∏°‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ ATZ ‡∏´‡∏£‡∏∑‡∏≠ AT+CFUN=0 ‡πÅ‡∏•‡πâ‡∏ß AT+CFUN=1

            üî∏ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô:

            ‚Ä¢ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏≤‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÅ‡∏•‡∏∞ SIM Card
            ‚Ä¢ ‡∏ñ‡πâ‡∏≤ SMS ‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Service Center
            ‚Ä¢ ‡∏ñ‡πâ‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡πá‡∏°‡∏Ñ‡πâ‡∏≤‡∏á: ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ATZ ‡∏´‡∏£‡∏∑‡∏≠ SIM Recovery
                    """
        
        tips_text.setText(tips_content.strip())
        layout.addWidget(tips_text)
        
        tips_group.setLayout(layout)
        return tips_group
    
    def create_footer(self, layout):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏∏‡πà‡∏°"""
        footer_layout = QHBoxLayout()
        footer_layout.addStretch()
        
        # Close Button
        close_btn = QPushButton("‚úñÔ∏è Close")
        close_btn.clicked.connect(self.accept)
        footer_layout.addWidget(close_btn)
        
        layout.addLayout(footer_layout)
        
        self.close_btn = close_btn
    
    def apply_styles(self):
        """‡πÉ‡∏ä‡πâ‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÇ‡∏ó‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£"""
        self.setStyleSheet("""
            QDialog {
                background-color: #fdf2f2;
                border: 2px solid #dc3545;
                border-radius: 10px;
            }
            
            QGroupBox {
                font-size: 14px;
                font-weight: 600;
                color: #721c24;
                border: 2px solid #dc3545;
                border-radius: 8px;
                margin-top: 10px;
                padding: 10px;
                background-color: #fff5f5;
            }
            
            QGroupBox:title {
                subcontrol-origin: margin;
                subcontrol-position: top left;
                padding: 0 8px;
                color: #a91e2c;
                font-weight: bold;
            }
            
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #dc3545, stop:1 #c82333);
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 6px;
                font-size: 12px;
                font-weight: bold;
            }
            
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #c82333, stop:1 #a71e2a);
                border: 1px solid #a71e2a;
            }
            
            QPushButton:pressed {
                background: #dc3545;
            }
            
            QTabWidget::pane {
                border: 2px solid #dc3545;
                border-radius: 8px;
                background-color: #fff5f5;
            }
            
            QTabBar::tab {
                background-color: #f8d7da;
                color: #721c24;
                padding: 8px 16px;
                margin-right: 2px;
                border: 1px solid #f5c6cb;
                border-bottom: none;
                border-top-left-radius: 6px;
                border-top-right-radius: 6px;
            }
            
            QTabBar::tab:selected {
                background-color: #dc3545;
                color: white;
                font-weight: bold;
            }
            
            QTabBar::tab:hover:!selected {
                background-color: #f1b0b7;
            }
            
            QScrollArea {
                border: none;
                background-color: transparent;
            }
            
            QTextEdit {
                border: 1px solid #dc3545;
                border-radius: 4px;
                background-color: white;
                color: #212529;
                font-family: 'Arial', sans-serif;
                font-size: 11px;
            }
            
            QFrame {
                border-radius: 4px;
                margin: 2px;
            }
        """)
        
        # Header specific styles
        self.header_frame.setStyleSheet("""
            QFrame {
                background-color: #fff5f5;
                border: 2px solid #f5c6cb;
                border-radius: 8px;
                padding: 10px;
                margin-bottom: 10px;
            }
        """)
        
        self.title_label.setStyleSheet("""
            QLabel {
                color: #721c24;
                font-weight: bold;
            }
        """)
        
        self.desc_label.setStyleSheet("""
            QLabel {
                color: #6c757d;
                font-style: italic;
            }
        """)


# Integration code for sim_info_window.py
"""
‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏ô sim_info_window.py:

1. ‡πÄ‡∏û‡∏¥‡πà‡∏° import ‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô:
from at_command_helper import ATCommandHelperDialog

2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô setup_connections():
self.btn_help.clicked.connect(self.show_at_command_helper)

3. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà:
def show_at_command_helper(self):
    '''‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á AT Command Helper'''
    try:
        helper_dialog = ATCommandHelperDialog(self)
        helper_dialog.exec_()
    except Exception as e:
        QMessageBox.warning(self, "Error", f"Cannot open AT Command Helper: {e}")
"""