# managers/smart_command_manager.py - Enhanced version with Signal Quality filtering
# üß† Smart Command Manager ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ AT Commands ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î + ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Signal Quality

import time
import queue
from enum import Enum
from PyQt5.QtCore import QTimer
from collections import deque

class CommandPriority(Enum):
    """üîß ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á"""
    CRITICAL = 0   # User commands ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
    HIGH = 1       # SMS sending/receiving
    MEDIUM = 2     # SIM recovery, Manual refresh  
    LOW = 3        # Background monitoring (Signal Quality)

class CommandSource(Enum):
    """üîß ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á"""
    USER_MAIN = "user_main"           # ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
    SMS_SEND = "sms_send"             # ‡∏™‡πà‡∏á SMS
    SMS_MONITOR = "sms_monitor"       # Monitor SMS
    SIGNAL_QUALITY = "signal_quality" # Signal Quality Checker
    SIM_RECOVERY = "sim_recovery"     # SIM Recovery
    BACKGROUND = "background"         # Background tasks

class SmartCommandManager:
    """
    üß† ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á AT ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î
    ‚úÖ ‡πÉ‡∏ä‡πâ Response ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥
    ‚úÖ ‡∏™‡πà‡∏á AT command ‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥
    ‚úÖ ‡πÑ‡∏°‡πà‡∏ä‡∏ô‡∏Å‡∏±‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á modules
    ‚úÖ ‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Signal Quality ‡∏à‡∏≤‡∏Å Response area
    """
    
    def __init__(self, serial_thread):
        self.serial_thread = serial_thread
        self.command_queue = deque()
        self.is_processing = False
        self.last_command_time = 0
        self.min_interval = 0.1  # ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        
        # üîß ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° module ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        self.active_modules = set()
        self.user_command_active = False
        self.signal_quality_active = False
        self.sms_sending_active = False
        
        # üîß ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° commands ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô UI
        self.silent_commands = set()
        self.background_responses = set()
        
        # üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á Signal Quality
        self.signal_quality_commands = set()
        self.signal_quality_patterns = {
            'AT+CSQ', 'AT+CESQ', 'AT+COPS', 'AT+CREG', 
            'AT+CIMI', 'AT+CCID', 'AT+CNUM', 'AT+QCSQ',
            'AT+QENG', 'AT+QNWINFO'
        }
        self.signal_quality_responses = {
            '+CSQ:', '+CESQ:', '+COPS:', '+CREG:', 
            '+CIMI:', '+CCID:', '+CNUM:', '+QCSQ:',
            '+QENG:', '+QNWINFO:'
        }
        
        # Timer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• queue
        self.process_timer = QTimer()
        self.process_timer.timeout.connect(self._process_queue)
        self.process_timer.start(50)  # ‡∏ó‡∏∏‡∏Å 50ms
        
        # Hook ‡πÄ‡∏Ç‡πâ‡∏≤ serial thread ‡πÄ‡∏î‡∏¥‡∏°
        self._hook_serial_thread()
    
    def _hook_serial_thread(self):
        """üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤ serial thread ‡πÄ‡∏î‡∏¥‡∏°"""
        if self.serial_thread:
            # ‡πÄ‡∏Å‡πá‡∏ö method ‡πÄ‡∏î‡∏¥‡∏°
            self.original_send_command = self.serial_thread.send_command
            self.original_process_line = getattr(self.serial_thread, 'process_received_line', None)
            
            # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ smart version
            self.serial_thread.send_command_smart = self.smart_send_command
            
            # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ response processing
            if hasattr(self.serial_thread, 'at_response_signal'):
                self.serial_thread.at_response_signal.connect(self.smart_process_response)
    
    def register_module(self, module_name: str):
        """üìù ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô module ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"""
        self.active_modules.add(module_name)
        
        if module_name == "signal_quality":
            self.signal_quality_active = True
        elif module_name == "sms_sending":
            self.sms_sending_active = True
    
    def unregister_module(self, module_name: str):
        """‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô module"""
        self.active_modules.discard(module_name)
        
        if module_name == "signal_quality":
            self.signal_quality_active = False
        elif module_name == "sms_sending":
            self.sms_sending_active = False
    
    def smart_send_command(self, command: str, source: CommandSource = CommandSource.USER_MAIN, 
                          priority: CommandPriority = CommandPriority.CRITICAL, silent: bool = False):
        """
        üß† ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á AT ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î
        
        Args:
            command: ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á AT
            source: ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á  
            priority: ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
            silent: ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á [SENT] ‡πÅ‡∏•‡∏∞‡∏ö‡∏≤‡∏á response ‡πÉ‡∏ô UI
        """
        
        # üÜï ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Signal Quality command ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if self._is_signal_quality_command(command):
            source = CommandSource.SIGNAL_QUALITY
            priority = CommandPriority.LOW
            silent = True
            self.signal_quality_commands.add(command.upper().strip())
        
        # üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏™‡πà‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏™‡πà queue
        if self._should_send_immediately(source, priority):
            return self._execute_command_now(command, source, silent)
        else:
            self._add_to_queue(command, source, priority, silent)
            return True
    
    def _is_signal_quality_command(self, command: str) -> bool:
        """üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å Signal Quality Checker ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        cmd_upper = command.upper().strip()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö pattern ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        for pattern in self.signal_quality_patterns:
            if cmd_upper.startswith(pattern):
                return True
        
        return False
    
    def _should_send_immediately(self, source: CommandSource, priority: CommandPriority) -> bool:
        """ü§î ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏™‡πà‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        
        current_time = time.time()
        
        # ‚úÖ User commands ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏™‡πà‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        if source == CommandSource.USER_MAIN:
            self.user_command_active = True
            return True
        
        # ‚úÖ SMS sending ‡∏°‡∏µ priority ‡∏™‡∏π‡∏á
        if source == CommandSource.SMS_SEND and priority <= CommandPriority.HIGH:
            return True
        
        # ‚úÖ Signal Quality commands ‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡πá‡∏ô background
        if source == CommandSource.SIGNAL_QUALITY:
            return True
        
        # ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß ‡πÅ‡∏•‡∏∞‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÅ‡∏•‡πâ‡∏ß
        if (len(self.command_queue) == 0 and 
            current_time - self.last_command_time >= self.min_interval):
            return True
        
        # ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ user command ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠ ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        if not self.user_command_active and priority <= CommandPriority.MEDIUM:
            return True
        
        return False
    
    def _execute_command_now(self, command: str, source: CommandSource, silent: bool) -> bool:
        """‚ö° ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ"""
        try:
            # üîß ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ silent mode
            if silent or source == CommandSource.SIGNAL_QUALITY:
                self.silent_commands.add(command.upper().strip())
            
            # ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô method ‡πÄ‡∏î‡∏¥‡∏°
            success = self.original_send_command(command)
            
            if success:
                self.last_command_time = time.time()
                
                # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï user command flag ‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à
                if source == CommandSource.USER_MAIN:
                    QTimer.singleShot(2000, self._reset_user_command_flag)
            
            return success
            
        except Exception as e:
            print(f"Error executing command: {e}")
            return False
    
    def _add_to_queue(self, command: str, source: CommandSource, priority: CommandPriority, silent: bool):
        """üì• ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ queue"""
        command_info = {
            'command': command,
            'source': source,
            'priority': priority,
            'silent': silent,
            'timestamp': time.time()
        }
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        inserted = False
        for i, existing in enumerate(self.command_queue):
            if priority.value < existing['priority'].value:
                self.command_queue.insert(i, command_info)
                inserted = True
                break
        
        if not inserted:
            self.command_queue.append(command_info)
    
    def _process_queue(self):
        """‚öôÔ∏è ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• command queue"""
        if not self.command_queue or self.is_processing:
            return
        
        current_time = time.time()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if current_time - self.last_command_time < self.min_interval:
            return
        
        # ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        command_info = self.command_queue.popleft()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏™‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if self._should_send_immediately(command_info['source'], command_info['priority']):
            self.is_processing = True
            success = self._execute_command_now(
                command_info['command'], 
                command_info['source'], 
                command_info['silent']
            )
            self.is_processing = False
            
            if not success:
                # ‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏™‡πà‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß
                self.command_queue.appendleft(command_info)
        else:
            # ‡πÉ‡∏™‡πà‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß
            self.command_queue.appendleft(command_info)
    
    def smart_process_response(self, line: str):
        """üîç ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î - ‡∏Å‡∏£‡∏≠‡∏á Signal Quality responses"""
        
        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô response ‡∏à‡∏≤‡∏Å Signal Quality ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if self._is_signal_quality_response(line):
            self._handle_signal_quality_response(line)
            return  # ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ UI ‡∏´‡∏•‡∏±‡∏Å
        
        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô response ‡∏à‡∏≤‡∏Å silent command ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if self._is_silent_response(line):
            self._handle_silent_response(line)
            return
        
        # ‚úÖ ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ UI ‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        if hasattr(self.serial_thread, 'parent') and hasattr(self.serial_thread.parent, 'update_at_result_display'):
            self.serial_thread.parent.update_at_result_display(line)
    
    def _is_signal_quality_response(self, line: str) -> bool:
        """üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô response ‡∏à‡∏≤‡∏Å Signal Quality ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        line_upper = line.strip().upper()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö response patterns
        for pattern in self.signal_quality_responses:
            if line_upper.startswith(pattern):
                return True
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OK/ERROR ‡∏´‡∏•‡∏±‡∏á Signal Quality commands
        if line_upper in ['OK', 'ERROR'] and self.signal_quality_commands:
            # ‡∏•‡πâ‡∏≤‡∏á signal quality commands ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ OK/ERROR
            self.signal_quality_commands.clear()
            return True
        
        return False
    
    def _handle_signal_quality_response(self, line: str):
        """üì∂ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ response ‡∏à‡∏≤‡∏Å Signal Quality - ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô UI ‡∏´‡∏•‡∏±‡∏Å"""
        # ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Signal Quality Window ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        self._notify_signal_quality_modules(line)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
        print(f"[SIGNAL QUALITY] {line}")
    
    def _is_silent_response(self, line: str) -> bool:
        """ü§î ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô response ‡∏à‡∏≤‡∏Å silent command ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏°‡∏µ user command ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏∏‡∏Å response
        if self.user_command_active:
            return False
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö pattern ‡∏à‡∏≤‡∏Å background commands (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Signal Quality)
        silent_patterns = [
            r'\+COPS:\s*\d+,\d+,"[^"]*"', # Operator selection (non-Signal Quality)
        ]
        
        import re
        for pattern in silent_patterns:
            if re.search(pattern, line):
                return True
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OK/ERROR ‡∏´‡∏•‡∏±‡∏á silent commands (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Signal Quality)
        if line.strip().upper() in ['OK', 'ERROR'] and self.silent_commands and not self.signal_quality_commands:
            self.silent_commands.clear()
            return True
        
        return False
    
    def _handle_silent_response(self, line: str):
        """ü§´ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ silent response"""
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å response ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö modules ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        self.background_responses.add(line)
        print(f"[SILENT] {line}")
    
    def _notify_signal_quality_modules(self, line: str):
        """üì∂ ‡πÅ‡∏à‡πâ‡∏á Signal Quality modules"""
        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Signal Quality Window ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
        if hasattr(self, 'signal_quality_window') and self.signal_quality_window:
            try:
                # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Signal Quality Window
                if hasattr(self.signal_quality_window, '_process_signal_data'):
                    self.signal_quality_window._process_signal_data(line)
                elif hasattr(self.signal_quality_window, 'monitoring_thread'):
                    # ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á monitoring thread
                    pass
            except Exception as e:
                print(f"Error notifying Signal Quality: {e}")
    
    def _reset_user_command_flag(self):
        """üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï user command flag"""
        self.user_command_active = False
    
    def register_signal_quality_window(self, window):
        """üì∂ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Signal Quality Window"""
        self.signal_quality_window = window
        print("Signal Quality Window registered with SmartCommandManager")
    
    def unregister_signal_quality_window(self):
        """üì∂ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Signal Quality Window"""
        self.signal_quality_window = None
        print("Signal Quality Window unregistered from SmartCommandManager")
    
    def get_status(self) -> dict:
        """üìä ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        return {
            'active_modules': list(self.active_modules),
            'queue_size': len(self.command_queue),
            'user_command_active': self.user_command_active,
            'signal_quality_active': self.signal_quality_active,
            'sms_sending_active': self.sms_sending_active,
            'signal_quality_commands': len(self.signal_quality_commands),
            'last_command_time': self.last_command_time
        }