from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QVBoxLayout, QWidget, QHBoxLayout, QLineEdit,
    QPushButton, QLabel, QComboBox, QGroupBox, QSizePolicy, QMessageBox,
    QTableWidget, QTableWidgetItem, QHeaderView, QDialog, QTextEdit, QFileDialog,
    QDateEdit, QCheckBox, QFrame, QSpacerItem
)
from PyQt5.QtCore import Qt, QEvent, QDate, pyqtSignal
from PyQt5.QtGui import QFont, QPalette, QColor
import sys, os, csv, time, re
from datetime import datetime, timedelta
from styles import SmsLogDialogStyles
import json
from pathlib import Path
import portalocker

def get_log_directory_from_settings():
    """‡∏î‡∏∂‡∏á log directory ‡∏à‡∏≤‡∏Å settings.json"""
    try:
        from services.sms_log import get_log_directory
        return get_log_directory()
    except Exception as e:
        print(f"Error getting log directory: {e}")
        return "./log"

_cfg_path = Path(__file__).parent / "settings.json"
try:
    LOG_DIR = Path(get_log_directory_from_settings())
except:
    LOG_DIR = Path(__file__).parent / "log"

class SmsLogDialog(QDialog):
    """‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ SMS ‡∏ó‡∏µ‡πà‡πÄ‡∏ô‡πâ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å (‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢) - ‡πÇ‡∏ó‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£"""
    send_sms_requested = pyqtSignal(str, str)
    last_export_dir = None

    def __init__(self, filter_phone=None, parent=None):
        super().__init__(parent)
        
        # ==================== 1. INITIALIZATION ====================
        self.filter_phone = filter_phone
        self.all_data = []
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
        self.setWindowTitle("üì± SMS History Manager | ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")
        self.resize(1000, 700)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á main layout
        self.main_layout = QVBoxLayout(self)
        self.main_layout.setSpacing(8)
        self.main_layout.setContentsMargins(15, 15, 15, 15)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ signals
        self.setup_simplified_ui()
        self.setup_connections()
        self.apply_styles()  # ‡πÉ‡∏ä‡πâ‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        self.load_log()
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ double click event
        self.table.cellDoubleClicked.connect(self.handle_row_double_clicked)

    # ==================== 2. UI SETUP ====================
    def setup_simplified_ui(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ UI ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤"""
        # ==================== SEARCH SECTION (‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏ô‡∏™‡∏∏‡∏î) ====================
        search_section = self.create_search_section()
        self.main_layout.addWidget(search_section)
        
        # ==================== CONTROL SECTION ====================
        control_section = self.create_simple_control_section()
        self.main_layout.addWidget(control_section)
        
        # ==================== TABLE SECTION ====================
        table_section = self.create_maximized_table_section()
        self.main_layout.addWidget(table_section, stretch=20)
        
        # ==================== FOOTER SECTION ====================
        footer = self.create_footer_section()
        self.main_layout.addWidget(footer)

    def create_search_section(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á section ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå/‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"""
        search_widget = QWidget()
        search_widget.setMinimumHeight(80)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
        search_widget.setMaximumHeight(100)  # ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        
        hlayout = QHBoxLayout(search_widget)
        hlayout.setSpacing(15)
        hlayout.setContentsMargins(20, 15, 20, 15)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° margin

        # Search label
        search_label = QLabel("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:")
        search_label.setFixedWidth(110)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
        search_label.setStyleSheet("""
            QLabel {
                font-size: 15px;
                font-weight: bold;
                color: #721c24;
                padding: 5px;
            }
        """)
        hlayout.addWidget(search_label)

        # Search input
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°...")
        self.search_input.setMinimumHeight(40)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á
        self.search_input.setMaximumHeight(45)
        self.search_input.textChanged.connect(self.apply_search_filter)
        hlayout.addWidget(self.search_input)

        # Search button
        self.search_button = QPushButton("üîç Search")
        self.search_button.setFixedWidth(130)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
        self.search_button.setMinimumHeight(40)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á
        self.search_button.setMaximumHeight(45)
        self.search_button.clicked.connect(self.apply_search_filter)
        hlayout.addWidget(self.search_button)

        # Clear search button
        self.clear_search_button = QPushButton("‚úñ Clear")
        self.clear_search_button.setFixedWidth(90)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
        self.clear_search_button.setMinimumHeight(40)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á
        self.clear_search_button.setMaximumHeight(45)
        self.clear_search_button.clicked.connect(self.clear_search)
        hlayout.addWidget(self.clear_search_button)

        # ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö reference ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö styling
        self.search_widget = search_widget
        self.search_label = search_label

        return search_widget

    def apply_search_filter(self):
        """‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"""
        query = self.search_input.text().strip().lower()
        visible_count = 0
        
        for row in range(self.table.rowCount()):
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
            phone_item = self.table.item(row, 2)
            msg_item = self.table.item(row, 3)
            
            if phone_item and msg_item:
                phone = phone_item.text().lower()
                msg = msg_item.text().lower()
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ñ‡∏ß‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                show = not query or (query in phone) or (query in msg)
                self.table.setRowHidden(row, not show)
                
                if show:
                    visible_count += 1
            else:
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ã‡πà‡∏≠‡∏ô‡πÅ‡∏ñ‡∏ß
                self.table.setRowHidden(row, True)
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        self.update_status_label(visible_count)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        if query:
            print(f"üîç Search for '{query}': Found {visible_count} results")

    def clear_search(self):
        """‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        self.search_input.clear()
        
        # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ñ‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        for row in range(self.table.rowCount()):
            self.table.setRowHidden(row, False)
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        self.update_status_label()
        
        print("üóëÔ∏è Search cleared - showing all data")

    def create_simple_control_section(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢"""
        control_widget = QWidget()
        
        hlayout = QHBoxLayout()
        hlayout.setSpacing(15)
        hlayout.setContentsMargins(15, 10, 15, 10)
        
        # ‡∏õ‡πâ‡∏≤‡∏¢ "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"
        label_history = QLabel("üìÇ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:")
        hlayout.addWidget(label_history)

        # ComboBox ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó SMS
        self.combo = QComboBox()
        self.combo.addItems(["üì§ SMS Send", "üì• SMS Inbox", "üì• SMS Fail"])
        self.combo.setFixedWidth(150)
        self.combo.setFixedHeight(32)
        self.combo.currentIndexChanged.connect(self.load_log)
        hlayout.addWidget(self.combo)

        hlayout.addSpacing(30)

        # ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
        sort_label = QLabel("üîÑ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö:")
        hlayout.addWidget(sort_label)
        
        self.sort_combo = QComboBox()
        self.sort_combo.addItems([
            "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÉ‡∏´‡∏°‡πà)",
            "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ (‡πÄ‡∏Å‡πà‡∏≤)"
        ])
        self.sort_combo.setFixedWidth(200)
        self.sort_combo.setFixedHeight(32)
        self.sort_combo.currentIndexChanged.connect(self.apply_sort_filter)
        hlayout.addWidget(self.sort_combo)

        hlayout.addStretch()
        
        control_widget.setLayout(hlayout)
        # control_widget.setMaximumHeight(60)
        
        # ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö reference ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö styling
        self.control_widget = control_widget
        self.label_history = label_history
        self.sort_label = sort_label
        
        return control_widget

    def create_maximized_table_section(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á table section ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î"""
        self.table = QTableWidget(0, 4)
        self.table.setHorizontalHeaderLabels(['üìÖ DATE', 'üïê TIME', 'üì± PHONE', 'üí¨ MESSAGE'])
        
        header = self.table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeToContents)  # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        header.setSectionResizeMode(1, QHeaderView.ResizeToContents)  # ‡πÄ‡∏ß‡∏•‡∏≤
        header.setSectionResizeMode(2, QHeaderView.ResizeToContents)  # ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
        header.setSectionResizeMode(3, QHeaderView.Stretch)  # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°)
        
        self.table.setMinimumHeight(500)
        self.table.verticalHeader().setDefaultSectionSize(45)
        self.table.cellDoubleClicked.connect(self.handle_row_double_clicked)

        return self.table

    def create_footer_section(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á footer section"""
        footer_widget = QWidget()
        btn_layout = QHBoxLayout()
        btn_layout.setSpacing(10)
        btn_layout.setContentsMargins(5, 5, 5, 5)
        
        # Status label
        self.status_label = QLabel("üìä ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: 0")
        btn_layout.addWidget(self.status_label)
        
        btn_layout.addStretch()
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ
        btn_refresh = self.create_button("üîÑ Refresh", 120)
        btn_refresh.clicked.connect(self.load_log)
        btn_layout.addWidget(btn_refresh)

        btn_export = self.create_button("üìä Export", 120)
        btn_export.clicked.connect(self.export_to_excel)
        btn_layout.addWidget(btn_export)
        
        btn_close = self.create_button("‚ùå Close", 120)
        btn_close.clicked.connect(self.close)
        btn_layout.addWidget(btn_close)
        
        footer_widget.setLayout(btn_layout)
        footer_widget.setMaximumHeight(60)
        
        # ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö reference ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö styling
        self.footer_widget = footer_widget
        self.btn_refresh = btn_refresh
        self.btn_export = btn_export
        self.btn_close = btn_close
        
        return footer_widget

    def create_button(self, text, width=None):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô"""
        button = QPushButton(text)
        if width:
            button.setFixedWidth(width)
        button.setFixedHeight(40)
        return button

    def apply_styles(self):
        """‡πÉ‡∏ä‡πâ‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏ó‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£"""
        # Dialog main style
        self.setStyleSheet(SmsLogDialogStyles.get_dialog_style())
        
        # Control section
        self.control_widget.setStyleSheet(SmsLogDialogStyles.get_control_section_style())
        self.label_history.setStyleSheet(SmsLogDialogStyles.get_control_label_style())
        self.sort_label.setStyleSheet(SmsLogDialogStyles.get_control_label_style())
        
        # ComboBoxes
        self.combo.setStyleSheet(SmsLogDialogStyles.get_combo_box_style())
        self.sort_combo.setStyleSheet(SmsLogDialogStyles.get_combo_box_style())
        
        # Table styles
        self.table.setStyleSheet(SmsLogDialogStyles.get_table_style())
        self.table.horizontalHeader().setStyleSheet(SmsLogDialogStyles.get_table_header_style())
        
        # Status label
        self.status_label.setStyleSheet(SmsLogDialogStyles.get_status_label_style())
        
        # Footer
        self.footer_widget.setStyleSheet(SmsLogDialogStyles.get_footer_style())
        
        # Buttons
        self.btn_refresh.setStyleSheet(SmsLogDialogStyles.get_info_button_style())
        self.btn_export.setStyleSheet(SmsLogDialogStyles.get_success_button_style())
        self.btn_close.setStyleSheet(SmsLogDialogStyles.get_danger_button_style())

    def setup_connections(self):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ signals ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢"""
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ComboBox ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
        self.sort_combo.currentIndexChanged.connect(self.apply_sort_filter)

    # ==================== 3. UTILITY FUNCTIONS ====================
    def darken_color(self, color, factor=0.2):
        """‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏™‡∏µ‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏∂‡πâ‡∏ô"""
        return SmsLogDialogStyles.darken_color(color, factor)

    def normalize_phone(self, phone):
        """‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£"""
        phone = phone.replace('-', '').replace(' ', '')
        if phone.startswith('+66'):
            phone = phone[3:]
        elif phone.startswith('66'):
            phone = phone[2:]
        return phone.lstrip('0')

    def parse_date_from_string(self, date_str):
        """‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô datetime object"""
        try:
            if ',' in date_str:
                date_part, time_part = date_str.split(',')
                y, m, d = date_part.split('/')
                year = int(y)
                year += 2000 if year < 100 else 0
                return datetime.strptime(f"{year:04d}-{m}-{d} {time_part}", "%Y-%m-%d %H:%M:%S")
            else:
                return datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")
        except:
            return None

    def update_status_label(self, custom_count=None):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"""
        try:
            if custom_count is not None:
                # ‡πÉ‡∏ä‡πâ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤)
                total_items = custom_count
            else:
                # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà
                total_items = 0
                for row in range(self.table.rowCount()):
                    if not self.table.isRowHidden(row):
                        total_items += 1
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if total_items == 1:
                    first_item = self.table.item(0, 0)
                    if first_item and ("‡πÑ‡∏°‡πà‡∏°‡∏µ" in first_item.text() or "üîç" in first_item.text()):
                        total_items = 0
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            search_query = self.search_input.text().strip()
            if search_query:
                self.status_label.setText(f"üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ '{search_query}': {total_items} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            else:
                self.status_label.setText(f"üìä ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_items}")
                
        except Exception as e:
            print(f"Error updating status label: {e}")
            self.status_label.setText("üìä ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: 0")
            
    # ==================== 4. DATA LOADING ====================
    def load_log(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SMS ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà"""
        idx = self.combo.currentIndex()
        
        # ‡πÉ‡∏ä‡πâ sms_log module ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á path ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        try:
            from services.sms_log import get_log_file_path
            filename = "sms_sent_log.csv" if idx != 1 else "sms_inbox_log.csv"
            log_path = get_log_file_path(filename)
            
            # Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ path
            if '\\\\' in log_path or '//' in log_path:
                print(f"[SMS LOG DIALOG] Using network path: {log_path}")
            else:
                print(f"[SMS LOG DIALOG] Using local path: {log_path}")
                
        except Exception as e:
            print(f"Error getting log file path: {e}")
            # Fallback ‡∏ñ‡πâ‡∏≤ function ‡πÑ‡∏°‡πà‡∏°‡∏µ
            filename = "sms_sent_log.csv" if idx != 1 else "sms_inbox_log.csv"
            log_path = os.path.join("log", filename)
        
        self.all_data = []

        if not os.path.isfile(log_path):
            self.table.setRowCount(1)
            self.table.setItem(0, 0, QTableWidgetItem("üìÇ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå log"))
            self.table.setItem(0, 1, QTableWidgetItem(""))
            self.table.setItem(0, 2, QTableWidgetItem(""))
            self.table.setItem(0, 3, QTableWidgetItem("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á SMS ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"))
            for col in range(4):
                it = self.table.item(0, col)
                it.setTextAlignment(Qt.AlignCenter)
                it.setForeground(QColor(127, 140, 141))
            self.update_status_label()
            return

        # ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°...
        try:
            with open(log_path, encoding="utf-8") as f:
                reader = csv.reader(f)
                next(reader, None)  # ‡∏Ç‡πâ‡∏≤‡∏° header

                for row in reader:
                    if idx == 1:
                        # Inbox pad ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö 3 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
                        dt_str, phone, message = (row + ["", ""])[:3]
                        status = ""
                        # parse inbox date/time
                        dt_str = dt_str.strip('"')

                        # parse inbox date/time ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï YY/MM/DD,HH:MM:SS+TZ
                        if "," in dt_str:
                            dpart, tpart = dt_str.split(",", 1)
                            if "+" in tpart:
                                tpart = tpart.split("+", 1)[0]
                            # ‡πÅ‡∏Å‡πâ‡πÄ‡∏õ‡πá‡∏ô: yy2, mm, dd2 = map(int, dpart.split("/"))
                            yy2, mm, dd2 = map(int, dpart.split("/"))
                            yyyy = yy2 + 2000 if yy2 < 100 else yy2
                            # ‡∏™‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô ‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ
                            date = f"{dd2:02d}/{mm:02d}/{yyyy}"
                            time = tpart.strip()
                            try:
                                datetime_obj = datetime.strptime(f"{yyyy}-{mm:02d}-{dd:02d} {time}", 
                                                                "%Y-%m-%d %H:%M:%S")
                            except:
                                datetime_obj = None
                        else:
                            date = dt_str
                            time = ""
                            datetime_obj = None

                    else:
                        # Send or Fail pad ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö 4 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
                        dt_str, phone, message, status = (row + ["", "", ""])[:4]
                        # parse outbox date/time
                        try:
                            dt = datetime.strptime(dt_str, "%Y-%m-%d %H:%M:%S")
                            date = dt.strftime("%d/%m/%Y")
                            time = dt.strftime("%H:%M:%S")
                            datetime_obj = dt
                        except:
                            date, time, datetime_obj = dt_str, "", None

                    # ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                    if self.filter_phone and phone != self.filter_phone:
                        continue
                    # ‡∏Å‡∏£‡∏ì‡∏µ Fail ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞ status != "Sent"
                    if idx == 2:
                        if not re.search(r'(fail|‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß)', status, flags=re.IGNORECASE):
                            continue

                    self.all_data.append({
                        'date': date,
                        'time': time,
                        'phone': phone,
                        'message': message,
                        'datetime': datetime_obj,
                        'status': status
                    })

        except Exception as e:
            self.table.setRowCount(1)
            self.table.setItem(0, 0, QTableWidgetItem("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"))
            self.table.setItem(0, 1, QTableWidgetItem(""))
            self.table.setItem(0, 2, QTableWidgetItem(""))
            self.table.setItem(0, 3, QTableWidgetItem(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {e}"))
            for col in range(4):
                it = self.table.item(0, col)
                it.setTextAlignment(Qt.AlignCenter)
                it.setForeground(QColor(231, 76, 60))
            return

        print(f"Loaded {len(self.all_data)} records from {log_path}")  # Debug
        self.apply_sort_filter()

    # ==================== 5. DATA FILTERING & SORTING ====================
    def apply_sort_filter(self):
        """‡πÉ‡∏ä‡πâ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö"""
        try:
            if not self.all_data:
                print("No data to sort")  # Debug
                return
                
            print(f"Sorting data, count: {len(self.all_data)}, sort index: {self.sort_combo.currentIndex()}")  # Debug
            
            # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏∞‡πÑ‡∏£ ‡πÅ‡∏Ñ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
            filtered_data = self.all_data.copy()
            idx = self.combo.currentIndex()
            filtered_data = self.all_data.copy()
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô SMS Fail ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà status ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà "Sent"
            if idx == 2:
                filtered_data = [d for d in filtered_data if d.get('status','').lower() != 'sent']
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            if self.sort_combo.currentIndex() == 0:  # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÉ‡∏´‡∏°‡πà ‚Üí ‡πÄ‡∏Å‡πà‡∏≤)
                filtered_data.sort(key=lambda x: x['datetime'] or datetime.min, reverse=True)
                print("Sorted: latest first")  # Debug
            else:  # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ (‡πÄ‡∏Å‡πà‡∏≤ ‚Üí ‡πÉ‡∏´‡∏°‡πà)
                filtered_data.sort(key=lambda x: x['datetime'] or datetime.min, reverse=False)
                print("Sorted: oldest first")  # Debug
            
            self.display_filtered_data(filtered_data)
            self.update_status_label()
            
        except Exception as e:
            print(f"Error applying sort filter: {e}")
            import traceback
            traceback.print_exc()

    # ==================== 6. TABLE DISPLAY ====================
    def display_filtered_data(self, data):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á"""
        self.table.setRowCount(0)
        
        if not data:
            self.table.setRowCount(1)
            self.table.setItem(0, 0, QTableWidgetItem("üîç ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"))
            self.table.setItem(0, 1, QTableWidgetItem(""))
            self.table.setItem(0, 2, QTableWidgetItem(""))
            self.table.setItem(0, 3, QTableWidgetItem("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ SMS ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏µ‡πâ"))
            
            # ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á
            for col in range(4):
                item = self.table.item(0, col)
                if item:
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setForeground(QColor(127, 140, 141))  # ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏ó‡∏≤
            return
            
        for row_idx, item in enumerate(data):
            self.table.insertRow(row_idx)
            
            # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
            date_item = QTableWidgetItem(item['date'])
            date_item.setTextAlignment(Qt.AlignCenter)
            self.table.setItem(row_idx, 0, date_item)
            
            # ‡πÄ‡∏ß‡∏•‡∏≤
            time_item = QTableWidgetItem(item['time'])
            time_item.setTextAlignment(Qt.AlignCenter)
            self.table.setItem(row_idx, 1, time_item)
            
            # ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
            phone_item = QTableWidgetItem(item['phone'])
            phone_item.setTextAlignment(Qt.AlignCenter)
            self.table.setItem(row_idx, 2, phone_item)
            
            # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            message_item = QTableWidgetItem(item['message'])
            message_item.setTextAlignment(Qt.AlignLeft | Qt.AlignVCenter)
            self.table.setItem(row_idx, 3, message_item)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏µ‡∏™‡∏±‡∏ô‡πÉ‡∏´‡πâ‡πÅ‡∏ñ‡∏ß
            if row_idx % 2 == 0:
                # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ background color ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏π‡πà
                for col in range(4):
                    item = self.table.item(row_idx, col)
                    if item:
                        item.setBackground(QColor(248, 249, 250))  # ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡πà‡∏≠‡∏ô

    # ==================== 7. EVENT HANDLERS ====================
    def handle_row_double_clicked(self, row, col):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£ double click ‡∏ö‡∏ô‡πÅ‡∏ñ‡∏ß"""
        phone_item = self.table.item(row, 2)
        msg_item = self.table.item(row, 3)
        if phone_item and msg_item:
            phone = phone_item.text()
            message = msg_item.text()
            self.send_sms_requested.emit(phone, message)
        self.accept()

    def on_row_double_clicked(self, row, col):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£ double click ‡∏ö‡∏ô‡πÅ‡∏ñ‡∏ß (‡∏≠‡∏µ‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ)"""
        # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        phone = self.table.item(row, 2).text()
        message = self.table.item(row, 3).text()
        # ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ main
        self.send_sms_requested.emit(phone, message)
        # ‡∏õ‡∏¥‡∏î dialog
        self.accept()

    # ==================== 8. EXPORT FUNCTIONS ====================
    def export_to_excel(self):
        """Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á Excel"""
        try:
            import pandas as pd
        except ImportError:
            QMessageBox.warning(
                self, 
                "üìä Export Error", 
                "‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á pandas ‡∏Å‡πà‡∏≠‡∏ô\n\n‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: pip install pandas"
            )
            return
        
        row_count = self.table.rowCount()
        if row_count == 0 or (row_count == 1 and not self.table.item(0, 0)):
            QMessageBox.information(
                self, 
                "üìä Export", 
                "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞ Export ‡∏Å‡πà‡∏≠‡∏ô"
            )
            return
        
        data = []
        headers = ['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', '‡πÄ‡∏ß‡∏•‡∏≤', '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£', '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°']
        
        for row in range(row_count):
            row_data = []
            empty_row = True
            for col in range(4):
                item = self.table.item(row, col)
                txt = item.text() if item else ''
                if txt and "‡πÑ‡∏°‡πà‡∏°‡∏µ" not in txt and "üîç" not in txt and "‚ùå" not in txt:
                    empty_row = False
                row_data.append(txt)
            if not empty_row:
                data.append(row_data)
        
        if not data:
            QMessageBox.information(
                self, 
                "üìä Export", 
                "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ Export"
            )
            return
        
        df = pd.DataFrame(data, columns=headers)
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå default ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô log folder ‡∏ö‡∏ô share ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if SmsLogDialog.last_export_dir and os.path.exists(SmsLogDialog.last_export_dir):
            initial_dir = SmsLogDialog.last_export_dir
        elif LOG_DIR.exists():
            initial_dir = str(LOG_DIR)
        else:
            initial_dir = os.path.join(os.path.expanduser("~"), "Desktop")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        sms_type = "sent" if self.combo.currentIndex() == 0 else "inbox"
        filename = f"sms_{sms_type}_log_{timestamp}.xlsx"
        
        path, _ = QFileDialog.getSaveFileName(
            self,
            "üìä Export to Excel",
            os.path.join(initial_dir, filename),
            "Excel Files (*.xlsx);;CSV Files (*.csv);;All Files (*)"
        )
        
        if not path:
            return
        
        SmsLogDialog.last_export_dir = os.path.dirname(path)
        
        try:
            if path.endswith('.csv'):
                df.to_csv(path, index=False, encoding='utf-8-sig')
            else:
                df.to_excel(path, index=False)
                
            QMessageBox.information(
                self, 
                "‚úÖ Export ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", 
                f"üìä Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!\n\n"
                f"üìÅ ‡πÑ‡∏ü‡∏•‡πå: {os.path.basename(path)}\n"
                f"üìÇ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: {os.path.dirname(path)}\n"
                f"üìã ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: {len(data)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
            )
        except Exception as e:
            QMessageBox.critical(
                self, 
                "‚ùå Export Error", 
                f"üí• Export ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n"
                f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}\n\n"
                f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:\n"
                f"‚Ä¢ ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏≠‡∏∑‡πà‡∏ô\n"
                f"‚Ä¢ ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏±‡πâ‡∏ô\n"
                f"‚Ä¢ ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏™‡∏Å‡πå‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠"
            )

    # ==================== 9. WINDOW EVENT HANDLERS ====================
    def closeEvent(self, event):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á SMS Log"""
        event.accept()
        self.deleteLater()


# ==================== MAIN EXECUTION ====================
if __name__ == "__main__":
    app = QApplication(sys.argv)
    dialog = SmsLogDialog()
    dialog.show()
    sys.exit(app.exec_())