
from PyQt5.QtWidgets import (
    QMainWindow, QVBoxLayout, QWidget, QHBoxLayout, QLineEdit,
    QPushButton, QLabel, QComboBox, QGroupBox, QSizePolicy, QMessageBox,
    QSpacerItem, QTextEdit, QShortcut
)
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QFont, QKeySequence

# core, managers, services, widgets, styles
from core import list_serial_ports, safe_get_attr, SettingsManager, ThemeManager
from managers import (
    ATCommandManager, SpecialCommandHandler,
    PortManager, SerialConnectionManager, SimRecoveryManager,
    SMSHandler, SMSInboxManager, DialogManager, SyncManager
)
from services import load_sim_data, SerialMonitorThread
from widgets import SimTableWidget
from styles import MainWindowStyles
from windows.at_command_helper import ATCommandHelper
from services.sms_log import log_sms_sent
from widgets.sms_log_dialog import SmsLogDialog
# from windows.sim_signal_quality_window import show_sim_signal_quality_window
from windows.enhanced_sim_signal_quality_window import show_enhanced_sim_signal_quality_window

class SimInfoWindow(QMainWindow):
    """‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° SIM Management System"""
    
    def __init__(self):
        super().__init__()
        
        self.setup_keyboard_shortcuts()
        
        # ==================== 1. INITIALIZATION ====================
        self.init_variables()
        self.init_managers()
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á UI
        self.load_application_settings()
        self.setup_window()
        self.setup_ui()
        self.setup_styles()
        self.setup_connections()
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        self.initialize_application()

    def init_variables(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç"""
        self.serial_thread = None
        self.netqual_mgr = None

        self.sims = []
        
        # SMS processing variables
        self._cmt_buffer = None
        self._notified_sms = set()
        
        # Recovery ‡πÅ‡∏•‡∏∞ monitoring variables
        self.sim_recovery_in_progress = False
        self.auto_sms_monitor = True
        self._is_sending_sms = False
        
        # Dialog references
        self.sms_monitor_dialog = None
        self.loading_dialog = None
        self.loading_widget = None
        self.open_dialogs = []

        # SMS processing variables
        self._cmt_buffer = None
        self._notified_sms = set()

        self.incoming_sms_count = 0

    def init_managers(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô manager classes ‡∏ï‡πà‡∏≤‡∏á‡πÜ"""
        self.settings_manager = SettingsManager()
        self.theme_manager = ThemeManager(self.settings_manager)
        self.at_command_manager = ATCommandManager(self)
        self.special_command_handler = SpecialCommandHandler(self)
        # self.sms_manager = SMSManager(self)
        self.sms_handler = SMSHandler(self)
        self.sms_inbox_manager = SMSInboxManager(self)
        self.port_manager = PortManager(self)
        self.serial_connection_manager = SerialConnectionManager(self)
        self.sim_recovery_manager = SimRecoveryManager(self)
        self.dialog_manager = DialogManager(self)
        self.sync_manager = SyncManager(self)

    def load_application_settings(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"""
        try:
            settings = self.settings_manager.load_settings()
            self.auto_sms_monitor = settings.get('auto_sms_monitor', True)
            
        except Exception as e:
            print(f"Error loading application settings: {e}")
            self.auto_sms_monitor = True

    # ==================== 2. WINDOW & UI SETUP ====================
    def setup_window(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å"""
        self.setWindowTitle("SIM Management System")
        
        # ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
        geometry = self.settings_manager.get_window_geometry()
        self.setGeometry(geometry['x'], geometry['y'], geometry['width'], geometry['height'])
        
        self.setStyleSheet(MainWindowStyles.get_main_window_style())
        self.setWindowFlags(Qt.Window | Qt.WindowMinimizeButtonHint | 
                           Qt.WindowMaximizeButtonHint | Qt.WindowCloseButtonHint)
        self.setAttribute(Qt.WA_DeleteOnClose, False)
    
    def setup_ui(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á UI components"""
        main_widget = QWidget()
        self.main_layout = QVBoxLayout()
        main_widget.setLayout(self.main_layout)
        self.setCentralWidget(main_widget)
        
        self.create_header()
        self.create_modem_controls()
        self.create_at_command_display()
        self.create_sim_table()
    
    def create_header(self): 
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô"""
        header = QLabel("SIM Management System")
        header.setAlignment(Qt.AlignHCenter)
        self.main_layout.addWidget(header)
        self.header = header
    
    def create_modem_controls(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏°‡πÄ‡∏î‡πá‡∏°"""
        modem_group = QGroupBox()
        modem_group.setTitle(" Set up modem connection ")
        modem_layout = QHBoxLayout()
        
        # Port Selection
        modem_layout.addWidget(QLabel("USB Port:"))
        self.port_combo = QComboBox()
        self.port_combo.setEditable(True)
        self.port_combo.setFixedWidth(220)
        modem_layout.addWidget(self.port_combo)
        
        # Baudrate Selection
        modem_layout.addSpacing(14)
        modem_layout.addWidget(QLabel("Baudrate:"))
        self.baud_combo = QComboBox()
        baudrates = ['9600', '19200', '38400', '57600', '115200']
        self.baud_combo.addItems(baudrates)
        self.baud_combo.setCurrentText('115200')
        self.baud_combo.setFixedWidth(110)
        modem_layout.addWidget(self.baud_combo)
        
        # Control Buttons
        self.create_control_buttons(modem_layout)
        
        modem_layout.addItem(QSpacerItem(40, 10, QSizePolicy.Expanding, QSizePolicy.Minimum))
        
        modem_group.setLayout(modem_layout)
        self.main_layout.addWidget(modem_group)
        self.main_layout.addSpacing(16)
        
        self.modem_group = modem_group
    
    def create_control_buttons(self, layout):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ - Updated version with improved Signal Quality button"""
        layout.addSpacing(16)
        
        button_width = 120
        
        # ‡∏õ‡∏∏‡πà‡∏° Refresh Ports
        self.btn_refresh = QPushButton("Refresh Ports")
        self.btn_refresh.setFixedWidth(button_width)
        layout.addWidget(self.btn_refresh)
        
        # ‡∏õ‡∏∏‡πà‡∏° ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ SMS
        self.btn_smslog = QPushButton("‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ SMS")
        self.btn_smslog.setFixedWidth(button_width)
        layout.addWidget(self.btn_smslog)
        
        # ‡∏õ‡∏∏‡πà‡∏° SMS Monitor
        self.btn_realtime_monitor = QPushButton("SMS Monitor")
        self.btn_realtime_monitor.setFixedWidth(button_width)
        layout.addWidget(self.btn_realtime_monitor)

        # ‡∏õ‡∏∏‡πà‡∏° SIM Recovery
        self.btn_sim_recovery = QPushButton("SIM Recovery")
        self.btn_sim_recovery.setFixedWidth(button_width)
        self.btn_sim_recovery.clicked.connect(self.sim_recovery_manager.manual_sim_recovery)
        self.btn_sim_recovery.setStyleSheet("""
            QPushButton {
                background-color: #e74c3c;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
            QPushButton:pressed {
                background-color: #a93226;
            }
            QPushButton:disabled {
                background-color: #bdc3c7;
                color: #7f8c8d;
            }
        """)
        layout.addWidget(self.btn_sim_recovery)
        
        # ‡∏õ‡∏∏‡πà‡∏° Signal Quality - ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÉ‡∏´‡∏°‡πà
        self.btn_signal_quality = QPushButton("üì∂ Signal Quality")
        self.btn_signal_quality.setFixedWidth(button_width + 20)  # ‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
        self.btn_signal_quality.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #9b59b6, stop:1 #8e44ad);
                color: white;
                border: 1px solid #7d3c98;
                padding: 8px 12px;
                border-radius: 6px;
                font-size: 11px;
                font-weight: bold;
                text-align: center;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #8e44ad, stop:1 #7d3c98);
                border: 1px solid #6c3483;
            }
            QPushButton:pressed {
                background: #7d3c98;
                padding-top: 9px;
                padding-bottom: 7px;
            }
            QPushButton:disabled {
                background-color: #bdc3c7;
                color: #7f8c8d;
                border: 1px solid #95a5a6;
            }
        """)
        layout.addWidget(self.btn_signal_quality)
        
        # ‡∏õ‡∏∏‡πà‡∏° Sync
        self.btn_sync = QPushButton("üîÑ Sync")
        self.btn_sync.setFixedWidth(100)
        self.btn_sync.clicked.connect(self.sync_manager.manual_sync)
        self.btn_sync.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
            QPushButton:pressed {
                background-color: #21618c;
            }
            QPushButton:disabled {
                background-color: #bdc3c7;
                color: #7f8c8d;
            }
        """)
        layout.addWidget(self.btn_sync)
        
        # SMS Inbox Badge Container (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        sms_container = QWidget()
        sms_container.setFixedSize(160, 40)
        sms_layout = QHBoxLayout()
        sms_layout.setContentsMargins(0, 0, 0, 0)
        sms_layout.setSpacing(0)
        
        self.sms_inbox_badge = QLabel("SMS Inbox")
        self.sms_inbox_badge.setAlignment(Qt.AlignCenter)
        self.sms_inbox_badge.setFixedSize(110, 35)
        self.sms_inbox_badge.setStyleSheet("""
            QLabel {
                background-color: #3498db;
                color: white;
                border: 2px solid #2980b9;
                border-radius: 8px;
                font-size: 13px;
                font-weight: 600;
                padding: 6px 8px;
            }
        """)
        sms_layout.addWidget(self.sms_inbox_badge)
        
        self.sms_count_badge = QLabel("0")
        self.sms_count_badge.setAlignment(Qt.AlignCenter)
        self.sms_count_badge.setFixedSize(28, 28)
        self.sms_count_badge.setStyleSheet("""
            QLabel {
                background-color: #e74c3c;
                color: white;
                border: 2px solid white;
                border-radius: 14px;
                font-size: 12px;
                font-weight: bold;
                text-align: center;
            }
        """)
        
        sms_layout.addWidget(self.sms_count_badge)
        sms_layout.setAlignment(self.sms_count_badge, Qt.AlignTop | Qt.AlignRight)
        sms_layout.setContentsMargins(-15, 0, 5, 0)
        
        sms_container.setLayout(sms_layout)
        layout.addWidget(sms_container)

    def update_sms_inbox_counter(self, count):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô SMS ‡πÉ‡∏ô inbox ‡πÅ‡∏ö‡∏ö Badge"""
        if hasattr(self, 'sms_count_badge'):
            if count == 0:
                # ‡∏ã‡πà‡∏≠‡∏ô badge ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ SMS
                self.sms_count_badge.hide()
                # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ SMS Inbox ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏ó‡∏≤
                self.sms_inbox_badge.setStyleSheet("""
                    QLabel {
                        background-color: #95a5a6;
                        color: white;
                        border: 2px solid #7f8c8d;
                        border-radius: 8px;
                        font-size: 13px;
                        font-weight: 600;
                        padding: 6px 8px;
                    }
                """)
            else:
                # ‡πÅ‡∏™‡∏î‡∏á badge ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
                self.sms_count_badge.show()
                
                # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 99+
                display_count = str(count) if count <= 99 else "99+"
                self.sms_count_badge.setText(display_count)
                
                # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ Badge ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
                if count >= 10:
                    # ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÄ‡∏Ç‡πâ‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡πÄ‡∏¢‡∏≠‡∏∞
                    badge_style = """
                        QLabel {
                            background-color: #c0392b;
                            color: white;
                            border: 2px solid white;
                            border-radius: 14px;
                            font-size: 11px;
                            font-weight: bold;
                            text-align: center;
                        }
                    """
                else:
                    # ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏õ‡∏Å‡∏ï‡∏¥
                    badge_style = """
                        QLabel {
                            background-color: #e74c3c;
                            color: white;
                            border: 2px solid white;
                            border-radius: 14px;
                            font-size: 12px;
                            font-weight: bold;
                            text-align: center;
                        }
                    """
                
                self.sms_count_badge.setStyleSheet(badge_style)
                
                # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ SMS Inbox ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ SMS
                self.sms_inbox_badge.setStyleSheet("""
                    QLabel {
                        background-color: #3498db;
                        color: white;
                        border: 2px solid #2980b9;
                        border-radius: 8px;
                        font-size: 13px;
                        font-weight: 600;
                        padding: 6px 8px;
                    }
                """)
    
    def animate_new_sms_badge(self):
        """‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ SMS ‡πÉ‡∏´‡∏°‡πà"""
        if hasattr(self, 'sms_count_badge') and self.sms_count_badge.isVisible():
            # ‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö
            original_style = self.sms_count_badge.styleSheet()
            
            # ‡∏™‡∏µ‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô (‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß)
            animation_style = """
                QLabel {
                    background-color: #27ae60;
                    color: white;
                    border: 2px solid white;
                    border-radius: 14px;
                    font-size: 12px;
                    font-weight: bold;
                    text-align: center;
                }
            """
            
            # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
            self.sms_count_badge.setStyleSheet(animation_style)
            
            # ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏•‡∏±‡∏á 1.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            QTimer.singleShot(1500, lambda: self.sms_count_badge.setStyleSheet(original_style))

    def on_new_sms_received(self):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö SMS ‡πÉ‡∏´‡∏°‡πà"""
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô SMS
        self.incoming_sms_count += 1
        new_count = self.incoming_sms_count
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
        self.update_sms_inbox_counter(new_count)
        
        # ‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        self.animate_new_sms_badge()
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô log
        self.update_at_result_display(f"[NEW SMS] üì© New SMS received!")

    def on_sms_read_or_deleted(self):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠ SMS ‡∏ñ‡∏π‡∏Å‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏ö"""
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏´‡∏°‡πà
        current_count = self.get_sms_inbox_count()
        self.update_sms_inbox_counter(current_count)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô log  
        self.update_at_result_display(f"[SMS UPDATE] üì¨ SMS count updated: {current_count}")


    def get_sms_inbox_count(self):
        """‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô SMS ‡πÉ‡∏ô inbox (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á - ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° SMS handler ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)"""
        try:
            # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö SMS handler ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏ö SMS ‡πÉ‡∏ô inbox
            if hasattr(self, 'sms_inbox_manager'):
                return self.sms_inbox_manager.get_sms_count()
            else:
                # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏≥‡∏£‡∏≠‡∏á - ‡∏ô‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                return 0
        except Exception as e:
            print(f"Error getting SMS count: {e}")
            return 0

    def refresh_sms_inbox_counter(self):
        """‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏à‡∏≥‡∏ô‡∏ß‡∏ô SMS inbox"""
        count = self.get_sms_inbox_count()
        self.incoming_sms_count = count
        self.update_sms_inbox_counter(self.incoming_sms_count)
        self.update_at_result_display(f"[SMS INBOX] üì¨ Current inbox count: {count} messages")

    def get_message_text(self):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
        if hasattr(self, 'sync_message_box'):
            return self.sync_message_box.text().strip()
        return ""

    def clear_message_text(self):
        """‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
        if hasattr(self, 'sync_message_box'):
            self.sync_message_box.clear()

    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ SIM
    def update_no_sim_status(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ SIM"""
        self.update_at_result_display("[SIM STATUS] ‚ùå No SIM card detected")
        self.update_at_result_display("[SIM STATUS] ‚ö†Ô∏è SMS sending will fail without SIM")
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        if hasattr(self, 'btn_send_sms_main'):
            self.btn_send_sms_main.setText("üìµ No SIM")
            self.btn_send_sms_main.setEnabled(True) 

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ SIM ‡πÅ‡∏ö‡∏ö manual
    def check_sim_status_manual(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ SIM ‡πÅ‡∏ö‡∏ö manual"""
        try:
            if not hasattr(self, 'sims') or not self.sims:
                self.update_at_result_display("[SIM CHECK] ‚ùå No SIM data available")
                return False
            
            sim = self.sims[0]
            
            if not hasattr(sim, 'imsi') or not sim.imsi or sim.imsi == '-':
                self.update_at_result_display("[SIM CHECK] ‚ùå No SIM card or SIM not ready")
                return False
            
            if not sim.imsi.isdigit() or len(sim.imsi) < 15:
                self.update_at_result_display("[SIM CHECK] ‚ùå Invalid or corrupted SIM card")
                return False
            
            if hasattr(sim, 'carrier') and sim.carrier in ['Unknown', 'No SIM']:
                self.update_at_result_display("[SIM CHECK] ‚ùå Cannot identify network provider")
                return False
            
            if hasattr(sim, 'signal'):
                signal_str = str(sim.signal).upper()
                if any(keyword in signal_str for keyword in ['NO SIM', 'NO SIGNAL', 'ERROR', 'PIN REQUIRED']):
                    self.update_at_result_display(f"[SIM CHECK] ‚ùå SIM problem: {sim.signal}")
                    return False
            
            self.update_at_result_display("[SIM CHECK] ‚úÖ SIM card is ready for SMS")
            self.update_at_result_display(f"[SIM CHECK] üìû Phone: {sim.phone}")
            self.update_at_result_display(f"[SIM CHECK] üì° Carrier: {sim.carrier}")
            self.update_at_result_display(f"[SIM CHECK] üì∂ Signal: {sim.signal}")
            return True
            
        except Exception as e:
            self.update_at_result_display(f"[SIM CHECK] ‚ùå Error checking SIM: {e}")
            return False

    def create_at_command_display(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á AT Command ‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå - Fixed Layout Version"""
        at_group = QGroupBox(" AT Command Display ")
        main_at_layout = QVBoxLayout()
        main_at_layout.setContentsMargins(8, 8, 8, 8)
        main_at_layout.setSpacing(10)

        # ‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏ô: ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á AT
        input_layout = QHBoxLayout()
        input_layout.setSpacing(5)
        input_layout.addWidget(QLabel("AT Command:"))

        self.at_combo_main = QComboBox()
        self.at_combo_main.setEditable(True)
        self.at_combo_main.setFixedWidth(300)
        input_layout.addWidget(self.at_combo_main)

        self.btn_del_cmd = QPushButton("DELETE")
        self.btn_del_cmd.setFixedWidth(100)
        input_layout.addWidget(self.btn_del_cmd)

        self.btn_help = QPushButton("Help")
        self.btn_help.setFixedWidth(70)
        input_layout.addWidget(self.btn_help)

        # ‡πÄ‡∏û‡∏¥‡πà‡∏° stretch ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏±‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢
        input_layout.addStretch()

        # ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á AT
        self.at_command_manager.load_command_history(self.at_combo_main)
        main_at_layout.addLayout(input_layout)
        main_at_layout.addSpacing(10)

        # ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á: ‡∏ã‡πâ‡∏≤‡∏¢ (SMS) + ‡∏Ç‡∏ß‡∏≤ (Response)
        middle_layout = QHBoxLayout()

        # ‡∏ã‡πâ‡∏≤‡∏¢: SMS input + ‡∏õ‡∏∏‡πà‡∏°
        left_layout = QVBoxLayout()
        left_layout.addWidget(QLabel("SMS messages:"))
        self.input_sms_main = QTextEdit()
        self.input_sms_main.setFixedHeight(50)
        left_layout.addWidget(self.input_sms_main)

        left_layout.addWidget(QLabel("Telephone number:"))
        self.input_phone_main = QLineEdit()
        self.input_phone_main.setPlaceholderText("Enter destination number...")
        self.input_phone_main.setFixedHeight(35)
        left_layout.addWidget(self.input_phone_main)
        left_layout.addSpacing(10)

        btn_at_layout = QHBoxLayout()
        self.btn_send_at = QPushButton("Send AT")
        self.btn_send_at.setFixedWidth(120)
        self.btn_send_sms_main = QPushButton("Send SMS")
        self.btn_send_sms_main.setFixedWidth(100)
        self.btn_show_sms = QPushButton("SMS inbox")
        self.btn_show_sms.setFixedWidth(120)
        self.btn_clear_sms_main = QPushButton("Delete SMS")
        self.btn_clear_sms_main.setFixedWidth(130)
        
        for btn in (self.btn_send_at, self.btn_send_sms_main, self.btn_show_sms, self.btn_clear_sms_main):
            btn_at_layout.addWidget(btn)
        btn_at_layout.addStretch()
        left_layout.addLayout(btn_at_layout)
        left_layout.addSpacing(10)

        left_layout.addWidget(QLabel("AT Command:"))
        self.at_command_display = QTextEdit()
        self.at_command_display.setFixedHeight(80)
        self.at_command_display.setReadOnly(True)
        self.at_command_display.setPlaceholderText("The AT commands sent will be displayed here...")
        left_layout.addWidget(self.at_command_display)
        middle_layout.addLayout(left_layout, stretch=1)

        # ‡∏Ç‡∏ß‡∏≤: Result Display + Toggle (FIXED LAYOUT)
        result_layout = QVBoxLayout()

        # ==================== FIXED HEADER LAYOUT ====================
        header_layout = QHBoxLayout()
        header_layout.setContentsMargins(0, 0, 0, 0)
        header_layout.setSpacing(8) 

        # Label "Response:"
        lbl = QLabel("Response:")
        lbl.setStyleSheet("font-weight: bold;")
        lbl.setMinimumWidth(70) 
        header_layout.addWidget(lbl)

        # Spacer ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏±‡∏ô‡∏õ‡∏∏‡πà‡∏° Hide ‡πÑ‡∏õ‡∏Ç‡∏ß‡∏≤
        header_layout.addStretch()

        # Toggle Button
        self.btn_toggle_response = QPushButton("Hide")
        self.btn_toggle_response.setCheckable(True)
        self.btn_toggle_response.setFixedWidth(60)
        self.btn_toggle_response.toggled.connect(self.on_toggle_response)
        header_layout.addWidget(self.btn_toggle_response)

        result_layout.addLayout(header_layout)

        # Response Display Area
        self.at_result_display = QTextEdit()
        self.at_result_display.setMinimumHeight(250)
        self.at_result_display.setReadOnly(True)
        self.at_result_display.setPlaceholderText("The results from the modem will be displayed here...")
        result_layout.addWidget(self.at_result_display)

        # Clear Response Button
        self.btn_clear_response = QPushButton("Clear Response")
        self.btn_clear_response.setFixedWidth(120)
        self.btn_clear_response.clicked.connect(self.clear_at_displays)
        result_layout.addWidget(self.btn_clear_response, 0, Qt.AlignRight)

        middle_layout.addLayout(result_layout, stretch=1)
        main_at_layout.addLayout(middle_layout)

        at_group.setLayout(main_at_layout)
        self.main_layout.addWidget(at_group)
        self.main_layout.addSpacing(16)
        self.at_group = at_group

    def show_at_command_helper(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á AT Command Helper"""
        try:
            helper_dialog = ATCommandHelper(self)
            helper_dialog.exec_()
        except Exception as e:
            QMessageBox.warning(self, "Error", f"Cannot open AT Command Helper: {e}")

    def create_sim_table(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡∏¥‡∏°"""
        self.table = SimTableWidget(self.sims, history_callback=self.show_sms_log_for_phone)
        self.table.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ font monospace ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Unicode bars
        from PyQt5.QtGui import QFont
        monospace_font = QFont("Consolas", 12)
        if not monospace_font.exactMatch():
            monospace_font = QFont("Courier New", 12)
        self.table.setFont(monospace_font)
        
        self.main_layout.addWidget(self.table, stretch=1)
        
    def setup_styles(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ CSS styles"""
        # Apply current theme
        current_theme = self.theme_manager.get_current_theme()
        self.theme_manager.apply_theme_to_widget(self, current_theme)
        
        # Apply specific styles
        self.header.setStyleSheet(MainWindowStyles.get_header_style())
        
        self.modem_group.setStyleSheet(MainWindowStyles.get_modem_group_style())
        self.at_group.setStyleSheet(MainWindowStyles.get_at_group_style())
        
        self.at_combo_main.setStyleSheet(MainWindowStyles.get_at_combo_style())
        self.input_sms_main.setStyleSheet(MainWindowStyles.get_sms_input_style())
        self.input_phone_main.setStyleSheet(MainWindowStyles.get_phone_input_style())
        
        self.btn_del_cmd.setStyleSheet(MainWindowStyles.get_delete_button_style())
        self.btn_help.setStyleSheet(MainWindowStyles.get_help_button_style())
        self.btn_send_at.setStyleSheet(MainWindowStyles.get_send_at_button_style())
        self.btn_show_sms.setStyleSheet(MainWindowStyles.get_show_sms_button_style())
        self.btn_send_sms_main.setStyleSheet(MainWindowStyles.get_send_sms_button_style())
        self.btn_clear_sms_main.setStyleSheet(MainWindowStyles.get_clear_sms_button_style())
        self.btn_clear_response.setStyleSheet(MainWindowStyles.get_clear_response_button_style())
        self.btn_refresh.setStyleSheet(MainWindowStyles.get_refresh_button_style())
        self.btn_smslog.setStyleSheet(MainWindowStyles.get_smslog_button_style())
        self.btn_realtime_monitor.setStyleSheet(MainWindowStyles.get_realtime_monitor_style())
        self.btn_toggle_response.setStyleSheet(MainWindowStyles.get_toggle_button_style())
        
        self.at_command_display.setStyleSheet(MainWindowStyles.get_command_display_style())
        self.at_result_display.setStyleSheet(MainWindowStyles.get_result_display_style())
        
        self.table.setStyleSheet(MainWindowStyles.get_table_style())
    
    def setup_connections(self):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ signals ‡πÅ‡∏•‡∏∞ slots - Updated version"""
        # Port management
        self.btn_refresh.clicked.connect(self.refresh_ports)
        
        # Dialog management
        self.btn_smslog.clicked.connect(self.dialog_manager.show_sms_log_dialog)
        self.btn_realtime_monitor.clicked.connect(self.open_realtime_monitor)
        
        # Signal Quality - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        self.btn_signal_quality.clicked.connect(self.show_signal_quality_checker)
        
        # AT Command management
        self.btn_send_at.clicked.connect(self.send_at_command_main)
        self.btn_del_cmd.clicked.connect(self.remove_at_command_main)
        self.btn_help.clicked.connect(self.show_at_command_helper)
        
        # SMS management
        self.btn_send_sms_main.clicked.connect(self.send_sms_main)
        self.btn_show_sms.clicked.connect(self.sms_inbox_manager.show_inbox_sms)
        self.btn_clear_sms_main.clicked.connect(self.sms_inbox_manager.clear_all_sms)
    
        # ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏õ‡∏∏‡πà‡∏° SMS ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        if hasattr(self, 'btn_failed_sms'):
            self.btn_failed_sms.clicked.connect(self.show_failed_sms_dialog)
        
        # AT Command management
        self.btn_send_at.clicked.connect(self.send_at_command_main)
        self.btn_del_cmd.clicked.connect(self.remove_at_command_main)
        self.btn_help.clicked.connect(self.show_at_command_helper)
        
        # SMS management - ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏•‡πâ‡∏ß
        self.btn_send_sms_main.clicked.connect(self.send_sms_main)
        self.btn_show_sms.clicked.connect(self.sms_inbox_manager.show_inbox_sms)
        self.btn_clear_sms_main.clicked.connect(self.sms_inbox_manager.clear_all_sms)
        
        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Enter key connections - ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡∏ß‡πà‡∏≤
        try:
            # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AT Command ComboBox
            if hasattr(self.at_combo_main, 'lineEdit'):
                line_edit = self.at_combo_main.lineEdit()
                if line_edit:
                    line_edit.returnPressed.connect(self.send_at_command_main)
                    print("‚úÖ AT Command Enter key connected successfully")
            else:
                # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏≥‡∏£‡∏≠‡∏á - ‡πÉ‡∏ä‡πâ QComboBox signal
                self.at_combo_main.editTextChanged.connect(self._handle_at_combo_change)
                print("‚úÖ AT Command fallback connection established")
                    
        except Exception as e:
            print(f"‚ùå AT Command Enter key connection failed: {e}")
            # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ - ‡πÉ‡∏ä‡πâ key event
            self.at_combo_main.installEventFilter(self)

        try:
            # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Phone number input
            self.input_phone_main.returnPressed.connect(self.send_sms_main)
            print("‚úÖ Phone input Enter key connected successfully")
        except Exception as e:
            print(f"‚ùå Phone input Enter key connection failed: {e}")
            
        try:
            # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SMS text input - ‡πÉ‡∏ä‡πâ Ctrl+Enter
            from PyQt5.QtWidgets import QShortcut
            from PyQt5.QtGui import QKeySequence
            sms_shortcut = QShortcut(QKeySequence("Ctrl+Return"), self.input_sms_main)
            sms_shortcut.activated.connect(self.send_sms_main)
            print("‚úÖ SMS Ctrl+Enter shortcut connected successfully")
        except Exception as e:
            print(f"‚ùå SMS shortcut connection failed: {e}")

    def _handle_at_combo_change(self, text):
        """Handle AT combo text change for fallback Enter key support"""
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        self._last_at_text = text

    def eventFilter(self, obj, event):
        """Event filter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Enter key fallback"""
        if obj == self.at_combo_main:
            if event.type() == event.KeyPress:
                if event.key() == 16777220:
                    self.send_at_command_main()
                    return True
        return super().eventFilter(obj, event)

    def setup_keyboard_shortcuts(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ keyboard shortcuts"""
        
        # Ctrl+Enter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á AT Command
        at_shortcut = QShortcut(QKeySequence("Ctrl+Return"), self)
        at_shortcut.activated.connect(self.send_at_command_main)
        
        # F1 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Help
        help_shortcut = QShortcut(QKeySequence("F1"), self)
        help_shortcut.activated.connect(self.show_at_command_helper)
        
        # F5 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Refresh
        refresh_shortcut = QShortcut(QKeySequence("F5"), self)
        refresh_shortcut.activated.connect(self.refresh_ports)
        
        # Ctrl+L ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Clear Response
        clear_shortcut = QShortcut(QKeySequence("Ctrl+L"), self)
        clear_shortcut.activated.connect(self.clear_at_displays)
        
    # ==================== 3. APPLICATION INITIALIZATION ====================
    def initialize_application(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"""
        # ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏û‡∏≠‡∏£‡πå‡∏ï
        self.refresh_ports()
        self.refresh_sms_inbox_counter()

        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö network connection
        self.sync_manager.test_network_connection()
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° Auto Sync ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
        self.sync_manager.auto_sync_on_startup()

        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î auto ‡πÉ‡∏´‡πâ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó monitor
        if self.auto_sms_monitor:
            self.start_sms_monitor()
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ serial ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏° monitor
        port = self.port_combo.currentData()
        baudrate = int(self.baud_combo.currentText())

        if port and port != "Device not found":
            from managers.port_manager import SerialConnectionManager
            self.connection_manager = SerialConnectionManager(self)
            self.connection_manager.start_sms_monitor(port, baudrate)
        else:
            self.update_at_result_display("[INIT] üìû No valid serial port to start monitoring")

    # ==================== 4. PORT & CONNECTION MANAGEMENT ====================
    def refresh_ports(self):
        """‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏≠‡∏£‡πå‡∏ï Serial"""
        self.port_manager.refresh_ports(self.port_combo)
        self.reload_sim_with_progress()
    
    def reload_sim_with_progress(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SIM ‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"""
        self.sims = self.port_manager.reload_sim_with_progress(self.port_combo, self.baud_combo)
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        if hasattr(self.table, 'set_data'):
            self.table.set_data(self.sims)
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏∏‡πà‡∏°
        port = self.port_combo.currentData()
        port_ok = bool(port and port != "Device not found")
        
        if hasattr(self.table, 'update_sms_button_enable'):
            self.table.update_sms_button_enable(port_ok)

        if port_ok:
            self.setup_serial_monitor()
            self.update_at_result_display("[REFRESH] ‚úÖ Refresh completed successfully!")
        else:
            self.update_at_result_display("[REFRESH] ‚ùå Refresh failed - no valid port")

    def setup_serial_monitor(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Serial Monitor Thread"""
        port = self.port_combo.currentData()
        baudrate = int(self.baud_combo.currentText())
        
        self.serial_thread = self.serial_connection_manager.setup_serial_monitor(port, baudrate)
        
        if self.serial_thread:
            self._cmt_buffer = None
            self._is_sending_sms = False
            self.auto_open_sms_monitor()

    def start_sms_monitor(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏° SMS monitoring"""
        port = self.port_combo.currentData()
        baudrate = int(self.baud_combo.currentText())
        
        if port and port != "Device not found":
            self.serial_connection_manager.start_sms_monitor(port, baudrate)

    def auto_open_sms_monitor(self):
        """‡πÄ‡∏õ‡∏¥‡∏î SMS Real-time Monitor ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
        if not self.auto_sms_monitor:
            return
            
        port = self.port_combo.currentData()
        baudrate = int(self.baud_combo.currentText())
        
        if port and port != "Device not found" and self.serial_thread:
            self.dialog_manager.auto_open_sms_monitor(port, baudrate, self.serial_thread)

    # ==================== 5. AT COMMAND HANDLING ====================
    def send_at_command_main(self):
        """‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á AT ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏•‡∏±‡∏Å"""
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ serial
        if not hasattr(self, 'serial_thread') or not self.serial_thread:
            from PyQt5.QtWidgets import QMessageBox
            QMessageBox.warning(
                self, 
                "No Connection", 
                "‚ùå No serial connection found!\n\n"
                "Please:\n"
                "1. Select correct USB Port\n"
                "2. Click 'Refresh Ports'\n"
                "3. Make sure the modem is connected"
            )
            return
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ thread ‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
        if not self.serial_thread.isRunning():
            from PyQt5.QtWidgets import QMessageBox
            QMessageBox.warning(
                self, 
                "Connection Lost", 
                "‚ùå Serial connection is not active!\n\n"
                "Please click 'Refresh Ports' to reconnect."
            )
            return
        
        # ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á AT
        cmd = self.at_combo_main.currentText().strip()
        if not cmd:
            from PyQt5.QtWidgets import QMessageBox
            QMessageBox.warning(self, "Empty Command", "üìµ Please enter an AT command")
            return
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©
        if cmd.upper() == "AT+RUN":
            self.special_command_handler.handle_at_run_command()
            self.update_at_command_display(cmd)
            return
        elif cmd.upper() == "AT+STOP":
            self.special_command_handler.handle_at_stop_command()
            self.update_at_command_display(cmd)
            return
        elif cmd.upper() == "AT+CLEAR":
            self.special_command_handler.handle_at_clear_command()
            self.update_at_command_display(cmd)
            return
        
        # ‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        self.clear_at_displays()
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
        self.at_command_manager.add_command_to_history(self.at_combo_main, cmd)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á
        self.update_at_command_display(cmd)
        
        # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô serial thread
        try:
            success = self.serial_thread.send_command(cmd)
            if not success:
                self.update_at_result_display("[ERROR] ‚ùå Failed to send command - serial connection issue")
        except Exception as e:
            self.update_at_result_display(f"[ERROR] ‚ùå Exception while sending command: {e}")


    def remove_at_command_main(self):
        self.at_command_manager.remove_command_from_history(self.at_combo_main)

    # ==================== 6. SMS HANDLING ====================
    def send_sms_main(self):
        """‡∏™‡πà‡∏á SMS ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å - Updated version"""
        phone_number = self.input_phone_main.text().strip()
        message = self.input_sms_main.toPlainText().strip()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≠‡∏ô
        if not phone_number:
            from PyQt5.QtWidgets import QMessageBox
            QMessageBox.warning(self, "Missing Phone Number", "üìµ Please enter a phone number")
            self.input_phone_main.setFocus()
            return
            
        if not message:
            from PyQt5.QtWidgets import QMessageBox
            QMessageBox.warning(self, "Missing Message", "üìµ Please enter a message to send")
            self.input_sms_main.setFocus()
            return
        
        # ‚≠ê ‡πÉ‡∏ä‡πâ SMS handler ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
        if hasattr(self, 'sms_handler'):
            try:
                success = self.sms_handler.send_sms_main(phone_number, message)
                if success:
                    # ‚≠ê ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏≠‡∏≠‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ sms_handler ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß
                    # log_sms_sent(phone_number, message, "‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å (real-time)")

                    # ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÉ‡∏´‡πâ reload log
                    if hasattr(self, 'sms_monitor_dialog') and self.sms_monitor_dialog:
                        self.sms_monitor_dialog.log_updated.emit()

                    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á SMS Log ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                    mon = getattr(self, 'sms_monitor_dialog', None)
                    if mon:
                        mon.log_updated.emit()

                    self.update_at_result_display(f"[SMS] ‚úÖ SMS sent successfully to {phone_number}")
                    
                    # ‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                    self.input_phone_main.clear()
                    self.input_sms_main.clear()
                # ‡∏ñ‡πâ‡∏≤ success = False ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ô sms_handler ‡πÅ‡∏•‡πâ‡∏ß
                    
            except Exception as e:
                self.update_at_result_display(f"[SMS ERROR] ‚ùå Exception while sending SMS: {e}")
        else:
            self.update_at_result_display("[SMS ERROR] ‚ùå SMS handler not available")

    def show_loading_dialog(self):
        """‡πÅ‡∏™‡∏î‡∏á Loading Dialog"""
        self.dialog_manager.show_loading_dialog()

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ SMS ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    def show_failed_sms_dialog(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ SMS ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"""
        try:
            # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ index 2 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SMS Fail
            dlg = SmsLogDialog(parent=self)
            dlg.combo.setCurrentIndex(2)
            dlg.load_log() 
            
            dlg.setModal(False)
            dlg.setWindowFlags(Qt.Window | Qt.WindowMinimizeButtonHint | 
                            Qt.WindowMaximizeButtonHint | Qt.WindowCloseButtonHint)
            dlg.show()
            
        except Exception as e:
            from PyQt5.QtWidgets import QMessageBox
            QMessageBox.warning(self, "Error", f"Cannot open Failed SMS dialog: {e}")


    def on_sms_sending_finished(self, success):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á SMS ‡πÄ‡∏™‡∏£‡πá‡∏à"""
        if success:
            QTimer.singleShot(2000, self.dialog_manager.close_loading_dialog)
            self.input_phone_main.clear()
            self.input_sms_main.clear()
        else:
            QTimer.singleShot(3000, self.dialog_manager.close_loading_dialog)

    def on_new_sms_signal(self, data_line):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì SMS ‡πÉ‡∏´‡∏°‡πà"""
        self.sms_handler.process_new_sms_signal(data_line)
        self.on_new_sms_received()

    def on_realtime_sms_received(self, sender, message, datetime_str):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö SMS real-time"""
        try:
            key = (datetime_str, sender, message)
            if key in self._notified_sms:
                return
            self._notified_sms.add(key)
            
            display_text = f"[REAL-TIME SMS] {datetime_str} | {sender}: {message}"
            self.update_at_result_display(display_text)
            
        except Exception as e:
            print(f"Error handling real-time SMS: {e}")
    
    def on_sms_log_updated(self):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠ SMS log ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó"""
        # ‡∏ß‡∏ô‡∏î‡∏π dialog ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô SmsLogDialog ‡πÉ‡∏´‡πâ‡∏™‡∏±‡πà‡∏á‡πÇ‡∏´‡∏•‡∏î log ‡πÉ‡∏´‡∏°‡πà
        for dlg in self.dialog_manager.open_dialogs:
            if isinstance(dlg, SmsLogDialog):
                dlg.load_log()
        try:
            self.update_at_result_display("[LOG UPDATE] SMS inbox log has been updated")
        except Exception as e:
            print(f"Error handling log update: {e}")

    # ==================== 7. SIM RECOVERY HANDLING ====================
    def on_sim_failure_detected(self):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö SIM failure"""
        self.sim_recovery_in_progress = True
        self.update_at_result_display("[SIM FAILURE] üö® SIM failure detected! Auto-recovery starting...")
        
        self.show_non_blocking_message(
            "SIM Failure Detected",
            "‚ö†Ô∏è SIM failure detected!\n\nSystem is performing automatic recovery...\n\nPlease wait for the process to complete."
        )
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ recovery
        QTimer.singleShot(10000, self.sim_recovery_manager.on_recovery_timeout)

    def on_cpin_ready_detected(self):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö CPIN READY"""
        if self.sim_recovery_in_progress:
            self.update_at_result_display("[MANUAL] ‚úÖ SIM card ready detected!")
            QTimer.singleShot(2000, self.finalize_manual_recovery)
        else:
            self.update_at_result_display("[AUTO] ‚úÖ SIM ready detected - refreshing data...")

    def on_sim_ready_auto(self):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ SIM ready ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
        if not self.sim_recovery_in_progress:
            self.update_at_result_display("[AUTO] SIM ready signal received")

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ: refresh ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SIM ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            QTimer.singleShot(1500, self.auto_refresh_sim_data)
    
    def auto_refresh_sim_data(self):
        """‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SIM ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠ SIM ‡∏û‡∏£‡πâ‡∏≠‡∏°"""
        self.update_at_result_display("[AUTO] ‚úÖ SIM ready detected - refreshing SIM data...")
        self.reload_sim_with_progress()


    def on_cpin_status_received(self, status):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ CPIN ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö"""
        self.update_at_result_display(f"[CPIN STATUS] {status}")
        
        if status == "READY" and self.sim_recovery_in_progress:
            QTimer.singleShot(1500, self.finalize_manual_recovery)
        elif status in ["PIN_REQUIRED", "PUK_REQUIRED"]:
            if self.sim_recovery_in_progress:
                self.sim_recovery_in_progress = False
                self.show_non_blocking_message(
                    "SIM Recovery Failed",
                    f"üìµ SIM recovery failed!\n\nSIM status: {status}\n\nPlease enter PIN/PUK manually."
                )

    def finalize_manual_recovery(self):
        """‡∏à‡∏ö‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ recovery ‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        if not self.sim_recovery_in_progress:
            return
            
        self.sim_recovery_in_progress = False
        self.update_at_result_display("[MANUAL] Finalizing recovery and refreshing SIM data...")
        
        # ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SIM
        self.sims = self.port_manager.reload_sim_with_progress(self.port_combo, self.baud_combo)
        self.table.set_data(self.sims)
        
        if self.sims and self.sims[0].imsi != "-":
            self.update_at_result_display(f"[MANUAL] ‚úÖ Recovery successful! SIM data refreshed")
            self.show_non_blocking_message(
                "SIM Recovery Successful",
                f"‚úÖ SIM recovery completed successfully!\n\nSIM Information:\n‚Ä¢ Phone: {self.sims[0].phone}\n‚Ä¢ Carrier: {self.sims[0].carrier}\n‚Ä¢ Signal: {self.sims[0].signal}"
            )
        else:
            self.update_at_result_display(f"[MANUAL] üìµ Recovery completed but SIM data not fully available")

    # ==================== 8. DIALOG MANAGEMENT ====================
    def open_realtime_monitor(self):
        """‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á SMS Real-time Monitor"""
        port = self.port_combo.currentData()
        baudrate = int(self.baud_combo.currentText())
        
        self.dialog_manager.show_sms_realtime_monitor(port, baudrate, self.serial_thread)

    def show_sms_log_for_phone(self, phone):
        """‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ SMS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏"""
        self.dialog_manager.show_sms_log_dialog(filter_phone=phone)

    def on_sms_monitor_closed(self):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠ SMS Monitor ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î"""
        try:
            self.sms_monitor_dialog = None
            self.update_at_result_display("[SMS MONITOR] Real-time SMS monitor closed")
        except Exception as e:
            print(f"Error handling SMS monitor close: {e}")

    def show_non_blocking_message(self, title, message):
        """‡πÅ‡∏™‡∏î‡∏á message box ‡πÅ‡∏ö‡∏ö non-blocking"""
        self.dialog_manager.show_non_blocking_message(title, message)

    def prefill_sms_to_send(self, phone, message):
        """‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏™‡πà‡∏á SMS"""
        self.input_phone_main.setText(phone)
        self.input_sms_main.setPlainText(message)
        self.input_sms_main.setFocus()
        self.activateWindow()

    # ==================== 9. DISPLAY MANAGEMENT ====================
    def update_at_command_display(self, command):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á AT"""
        current_text = self.at_command_display.toPlainText()
        if current_text:
            self.at_command_display.setPlainText(current_text + "\n" + command)
        else:
            self.at_command_display.setPlainText(command)
        
        cursor = self.at_command_display.textCursor()
        cursor.movePosition(cursor.End)
        self.at_command_display.setTextCursor(cursor)
    
    def update_at_result_display(self, result):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå AT"""
        current_text = self.at_result_display.toPlainText()
        if current_text:
            self.at_result_display.setPlainText(current_text + "\n" + result)
        else:
            self.at_result_display.setPlainText(result)
        
        cursor = self.at_result_display.textCursor()
        cursor.movePosition(cursor.End)
        self.at_result_display.setTextCursor(cursor)

    def clear_at_displays(self):
        """‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á AT Command ‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"""
        self.at_command_display.clear()
        self.at_result_display.clear()
        # ‡∏ñ‡πâ‡∏≤‡∏Å‡∏î Clear Response ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï SMS Inbox counter ‡∏î‡πâ‡∏ß‡∏¢
        self.incoming_sms_count = 0
        self.update_sms_inbox_counter(0)

    def on_toggle_response(self, hidden: bool):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏ô/‡πÅ‡∏™‡∏î‡∏á response display"""
        if hidden:
            self.at_result_display.hide()
            self.btn_clear_response.hide()
            self.btn_toggle_response.setText("Show")
        else:
            self.at_result_display.show()
            self.btn_clear_response.show()
            self.btn_toggle_response.setText("Hide")

    # ==================== 10. WINDOW EVENT HANDLERS ====================
    def closeEvent(self, event):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å"""
        try:
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
            geometry = self.geometry()
            self.settings_manager.update_window_geometry(
                geometry.x(), geometry.y(), geometry.width(), geometry.height()
            )
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            port = self.port_combo.currentData() or ""
            baudrate = self.baud_combo.currentText()
            self.settings_manager.update_last_connection(port, baudrate)
            
            # ‡∏´‡∏¢‡∏∏‡∏î serial thread
            self.serial_connection_manager.stop_serial_monitor()
                
            # ‡∏õ‡∏¥‡∏î dialogs ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            self.dialog_manager.close_all_dialogs()
                        
        except Exception as e:
            print(f"Error during close: {e}")
        
        event.accept()

    def show_signal_quality_checker(self):
        """‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Enhanced Signal Quality Checker - Improved version"""
        try:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ debug
            port = self.port_combo.currentData()
            baudrate = int(self.baud_combo.currentText())
            
            print(f"\nüîç SIGNAL QUALITY DEBUG:")
            print(f"üìå Port: {port}")
            print(f"üìå Baudrate: {baudrate}")
            print(f"üìå Serial Thread: {self.serial_thread is not None}")
            print(f"üìå Thread Running: {self.serial_thread.isRunning() if self.serial_thread else False}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö port
            if not port or port == "Device not found":
                QMessageBox.warning(self, "No Port Selected", 
                                "‚ùå Please select a valid COM port first!\n\n"
                                "Steps:\n"
                                "1. Connect your modem to USB\n"
                                "2. Click 'Refresh Ports'\n"
                                "3. Select the correct port\n"
                                "4. Try again")
                return
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö serial connection
            if not self.serial_thread or not self.serial_thread.isRunning():
                QMessageBox.warning(self, "No Connection", 
                                "‚ùå No active serial connection!\n\n"
                                "Please click 'Refresh Ports' to establish connection.")
                return
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°
            self.update_at_result_display("[SIGNAL QUALITY] üöÄ Opening Signal Quality Checker...")
            
            # Import ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á window
            try:
                from windows.enhanced_sim_signal_quality_window import show_enhanced_sim_signal_quality_window
                print("‚úÖ Module imported successfully")
            except ImportError as e:
                print(f"‚ùå Import failed: {e}")
                QMessageBox.critical(self, "Import Error", 
                                f"‚ùå Cannot import Signal Quality module:\n\n{e}")
                return
            
            print("üèóÔ∏è Creating Signal Quality window...")
            
            quality_window = show_enhanced_sim_signal_quality_window(
                port=port, 
                baudrate=baudrate, 
                parent=self, 
                serial_thread=self.serial_thread
            )
            
            if quality_window:
                print("‚úÖ Signal Quality window created successfully!")
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô dialog manager
                if hasattr(self, 'dialog_manager') and hasattr(self.dialog_manager, 'open_dialogs'):
                    self.dialog_manager.open_dialogs.append(quality_window)
                    print("‚úÖ Added to dialog manager")
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                self.update_at_result_display("[SIGNAL QUALITY] ‚úÖ Signal Quality Checker opened successfully!")
                
                # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏õ‡∏∏‡πà‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
                original_style = self.btn_signal_quality.styleSheet()
                success_style = """
                    QPushButton {
                        background-color: #27ae60;
                        color: white;
                        border: 1px solid #229954;
                        padding: 8px 12px;
                        border-radius: 6px;
                        font-size: 11px;
                        font-weight: bold;
                    }
                """
                self.btn_signal_quality.setStyleSheet(success_style)
                
                # ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏•‡∏±‡∏á 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                QTimer.singleShot(2000, lambda: self.btn_signal_quality.setStyleSheet(original_style))
                
                return quality_window
            else:
                print("‚ùå Failed to create Signal Quality window")
                QMessageBox.critical(self, "Creation Failed", 
                                "‚ùå Failed to create Signal Quality window!\n\n"
                                "Please check console for error details.")
                self.update_at_result_display("[SIGNAL QUALITY] ‚ùå Failed to open Signal Quality Checker")
                
        except Exception as e:
            error_msg = f"Error opening Signal Quality Checker: {e}"
            print(f"‚ùå EXCEPTION: {error_msg}")
            
            QMessageBox.critical(self, "Error", 
                            f"‚ùå Cannot open Signal Quality Checker:\n\n{error_msg}\n\n"
                            f"Debug Info:\n"
                            f"‚Ä¢ Check console for details\n"
                            f"‚Ä¢ Verify port connection\n"
                            f"‚Ä¢ Restart application if needed")
            
            self.update_at_result_display(f"[SIGNAL QUALITY] ‚ùå Error: {error_msg}")

    def test_signal_quality_button(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏° Signal Quality"""
        try:
            print("üß™ Testing Signal Quality button...")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß
            if hasattr(self, 'btn_signal_quality'):
                print("‚úÖ Button exists")
                print(f"‚úÖ Button enabled: {self.btn_signal_quality.isEnabled()}")
                print(f"‚úÖ Button visible: {self.btn_signal_quality.isVisible()}")
                
                # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å
                self.btn_signal_quality.click()
                print("‚úÖ Button click simulated")
            else:
                print("‚ùå Button does not exist")
                
        except Exception as e:
            print(f"‚ùå Test failed: {e}")